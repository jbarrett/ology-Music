#!/usr/bin/env perl
use strict;
use warnings;
no autovivification;

# Writeup: https://ology.github.io/2022/04/23/coltranes-mystery-music-diagram/

use Data::Dumper::Compact qw(ddc);
use List::SomeUtils qw(first_index);

#use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny Music-Duration-Partition Music-ScaleNote);
use MIDI::Drummer::Tiny;
use MIDI::Util qw(set_chan_patch);
use Music::Duration::Partition;
use Music::ScaleNote;

use constant HEAD   => 0;
use constant MIDDLE => 2;
use constant TAIL   => 4;
use constant LEFT   => -1;
use constant RIGHT  => 1;
use constant FORMAT => 'midi';

my $max   = shift || 12;
my $bpm   = shift || 100;
my $patch = shift || 66; # soprano sax=64, alto=65, tenor=66, bari=67

my $channel = 0;

my @outer = (
    [qw(Af Bf C  D  E )],
    [qw(Gf Af Bf C  D )],
    [qw(E  Gf Af Bf C )],
    [qw(D  E  Gf Af Bf)],
    [qw(C  D  E  Gf Af)],
    [qw(Bf C  D  E  Gf)],
);
my @inner = (
    [qw(Df Ef F  G  A )],
    [qw(B  Df Ef F  G )],
    [qw(A  B  Df Ef F )],
    [qw(G  A  B  Df Ef)],
    [qw(F  G  A  B  Df)],
    [qw(Ef F  G  A  B )],
);
my %outer_links = (
    0 => {
        Af => [5],
        C  => [5,0],
        E  => [0],
    },
    1 => {
        Gf => [0],
        Bf => [0,1],
        D  => [1],
    },
    2 => {
        E  => [1],
        Af => [1,2],
        C  => [2],
    },
    3 => {
        D  => [2],
        Gf => [2,3],
        Bf => [3],
    },
    4 => {
        C  => [3],
        E  => [3,4],
        Af => [4],
    },
    5 => {
        Bf => [4],
        D  => [4,5],
        Gf => [5],
    },
);
my %inner_links = (
    0 => {
        Df => [0],
        F  => [0,1],
        A  => [1],
    },
    1 => {
        B  => [1],
        Ef => [1,2],
        G  => [2],
    },
    2 => {
        A  => [2],
        Df => [2,3],
        F  => [3],
    },
    3 => {
        G  => [3],
        B  => [3,4],
        Ef => [4],
    },
    4 => {
        F  => [4],
        A  => [4,5],
        Df => [5],
    },
    5 => {
        Ef => [5],
        G  => [5,0],
        B  => [0],
    },
);

my $outer_scale = Music::ScaleNote->new(
  scale_note  => 'C',
  scale_name  => 'wholetone',
  note_format => FORMAT,
  flat        => 1,
#  verbose     => 1,
);
my $inner_scale = Music::ScaleNote->new(
  scale_note  => 'C#',
  scale_name  => 'wholetone',
  note_format => FORMAT,
  flat        => 1,
#  verbose     => 1,
);

my $d = MIDI::Drummer::Tiny->new(
    file => "$0.mid",
    bpm  => $bpm,
    bars => $max,
);

$d->sync(
    \&drums,
    \&coltrane,
);

$d->write;

sub drums {
    $d->metronome44swing; # swing for the number of bars
    $d->note($d->quarter, $d->ride1, $d->kick);
}

sub coltrane {
    set_chan_patch($d->score, $channel, $patch);

    # initial conditions
    my $in_out       = int rand 2;
    my $section_num  = int rand @inner;
    my $section      = $in_out ? $inner[$section_num] : $outer[$section_num];
    my $index        = int rand @$section;
    my $current_note = $section->[$index];
    my $direction    = int rand 2 ? RIGHT : LEFT;
    my $next_note;
    my $formatted;

    my $mdp = Music::Duration::Partition->new(
        size    => 4,
        pool    => [qw/ qn tqn en ten /],
        groups  => [    1, 3,  1, 3    ],
        weights => [    1, 2,  3, 4   ],
    );
    my @motifs = map { $mdp->motif } 1 .. 3;

    for my $n (1 .. $max) {
        warn sprintf "%d. %d (%s)[%d] = %s, %d\n",
            $n, $section_num, "@$section", $index, $current_note, $direction;

        my $motif = $motifs[ int rand @motifs ];

        for my $m (@$motif) {
            if (($index == HEAD && $direction == LEFT) || ($index == TAIL && $direction == RIGHT)) {
                ($in_out, $section_num, $index, $formatted, $section) = step_in_out(
                    $next_note,
                    $in_out,
                    $inner_scale,
                    $outer_scale,
                    $current_note,
                    $direction,
                    $formatted,
                    $section_num,
                    $section,
                    \@inner,
                    \@outer,
                    \%inner_links,
                    \%outer_links,
                    $index,
                );
            }
            else {
                my $roll = int rand 2;
                if ($index == MIDDLE && $roll) {
                    ($in_out, $section_num, $index, $formatted, $section) = step_in_out(
                        $next_note,
                        $in_out,
                        $inner_scale,
                        $outer_scale,
                        $current_note,
                        $direction,
                        $formatted,
                        $section_num,
                        $section,
                        \@inner,
                        \@outer,
                        \%inner_links,
                        \%outer_links,
                        $index,
                    );
                }
                else {
                    $next_note = $in_out
                        ? $inner_scale->get_offset(note_name => $current_note, offset => $direction)
                        : $outer_scale->get_offset(note_name => $current_note, offset => $direction);

                    $formatted = $next_note->format(FORMAT);
                    (my $sans_octave = $formatted) =~ s/\d+$//;

                    $index = first_index { $_ eq $sans_octave } @$section;
                }
            }

            $d->note($m, $formatted);

            warn "\tNew note: (@$section)[$index] = $formatted, $m\n",

            # Iterate the parameters:
            $current_note = $section->[$index];
            $direction    = int rand 2 ? RIGHT : LEFT;
        }
    }
}

sub step_in_out {
    my (
        $next_note,
        $in_out,
        $inner_scale,
        $outer_scale,
        $current_note,
        $direction,
        $formatted,
        $section_num,
        $section,
        $inner,
        $outer,
        $inner_links,
        $outer_links,
        $index,
    ) = @_;

    $next_note = $in_out
        ? $inner_scale->step(note_name => $current_note, steps => $direction)
        : $outer_scale->step(note_name => $current_note, steps => $direction);

    $formatted = $next_note->format(FORMAT);
    (my $sans_octave = $formatted) =~ s/\d+$//;

    $in_out = $in_out ? 0 : 1;
    if ($in_out) {
        my $i = exists $outer_links->{$section_num}{$current_note}
            && defined $outer_links->{$section_num}{$current_note}[RIGHT]
            && $direction == RIGHT ? 1 : 0;

        $section_num = $outer_links->{$section_num}{$current_note}[$i];

        $section = $inner->[$section_num];
    }
    else {
        my $i = exists $inner_links->{$section_num}{$current_note}
            && defined $inner_links->{$section_num}{$current_note}[RIGHT]
            && $direction == RIGHT ? 1 : 0;

        $section_num = $inner_links->{$section_num}{$current_note}[$i];

        $section = $outer->[$section_num];
    }
    $index = first_index { $_ eq $sans_octave } @$section;

    return $in_out, $section_num, $index, $formatted, $section;
}
