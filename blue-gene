#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact qw(ddc);
use List::Util qw(any);
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Chord-Guitar MIDI-Drummer-Tiny MIDI-Util Music-Duration-Partition);
use MIDI::Drummer::Tiny;
use MIDI::Chord::Guitar;
use MIDI::Util qw(set_chan_patch);
use Music::Duration::Partition;
use Music::Chord::Note;
use Music::Note;
use Music::Scales qw(get_scale_notes get_scale_MIDI);
use Music::VoiceGen;

my $bpm = shift || 100;
my $tscale = shift || 'pentatonic';
my $bscale = shift || 'major';

my $note = 'Bb';
my $bass_patch = 0; # fretless bass=35
my $melody_patch = 66;
my $chord_patch = 0; # electric piano=4

my $d = MIDI::Drummer::Tiny->new(
    file => $0 . '.mid',
    bpm  => 100,
    bars => 4,
);

my $channel = 0; # Internal increment

$d->score->synch(
    \&drums,
    \&bass,
    \&chords,
#    \&melody,
);

$d->write;

sub drums {
    $d->count_in(1);
    for my $n (1 .. $d->bars * $d->bars) {
        $d->note($d->quarter,        $d->ride1, $d->kick);
        $d->note($d->triplet_eighth, $d->ride1);
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, $d->ride1);
        $d->note($d->quarter,        $d->ride1, $d->snare);
        $d->note($d->triplet_eighth, $d->ride1, $d->kick);
        $d->rest($d->triplet_eighth);
        $d->note($d->triplet_eighth, $d->ride1);
    }
}

sub bass {
    set_chan_patch($d->score, $channel++, $bass_patch);

    $d->rest($d->whole); # while counting-in

    _bass('Bb', 4);
    _bass('Bb7', 4);
    _bass('Eb', 4);
    _bass('Eb9', 2);
    _bass('D7#9', 2);
    _bass('BbM7', 4);
    _bass('DbM7', 4);
    _bass('Cm7', 4);
    _bass('Gm7', 2);
    _bass('Ab7b5', 2);
}

sub _bass {
    my ($chord, $duration) = @_;

    my $octave = 2;

    my $scale = $chord =~ /^[A-G][#b]?m/ ? 'minor' : 'major';

    my $chord_note;
    my $flavor;
    if ($chord =~ /^([A-G][#b]?)(.*)$/) {
        $chord_note = $1;
        $flavor = $2;
    }

    my $cn = Music::Chord::Note->new;

    my @notes = $cn->chord_with_octave($chord, $octave);

    my @pitches = get_scale_MIDI($chord_note, $octave, $scale);

    # Guitar constraint
#    while ($pitches[0] < 40) {
#        shift @pitches;
#    }

    my @named = map { Music::Note->new($_, 'midinum')->format('ISO') } @pitches;
    for my $n (@notes) {
        if (not any { $_ eq $n } @named) {
            my $x = Music::Note->new($n, 'ISO')->format('midinum');
#            push @pitches, $x unless $x < 40; # Guitar constraint
            push @pitches, $x;
        }
    }
    @pitches = sort { $a <=> $b } @pitches;

    my @tones = get_scale_notes($chord_note, $scale);

    my @fixed;
    for my $p (@pitches) {
        my $x = Music::Note->new($p, 'midinum')->format('isobase');
        if (
            ($flavor =~ /5/ && $x eq $tones[4])
            ||
            ($flavor =~ /7/ && $x eq $tones[6])
            ||
            ($flavor =~ /[#b]9/ && $x eq $tones[1])
        ) {
            next;
        }
        push @fixed, $p;
    }

    my @intervals = qw(-3 -2 -1 1 2 3);

    my $voice = Music::VoiceGen->new(
        pitches   => \@fixed,
        intervals => \@intervals,
    );

    $voice->context($fixed[int @fixed / 2]);

    for (1 .. $duration) {
        my $v = $voice->rand;
        $d->note($d->quarter, $v);
    }
}

sub chords {
    set_chan_patch($d->score, $channel++, $chord_patch);

    my $mcg = MIDI::Chord::Guitar->new(voicing_file => "$ENV{HOME}/sandbox/MIDI-Chord-Guitar/share/midi-guitar-chord-voicings.csv");
    # 1
    my $Bfmaj7 = $mcg->transform('Bb2', 'maj7', 3);
    my $Dfmaj7 = $mcg->transform('Db3', 'maj7', 1);
    my $Cm7    = $mcg->transform('C3', 'm7', 1);
    my $Gm7    = $mcg->transform('G2', 'm7', 2);
    my $Af7f5  = $mcg->transform('Ab2', '7b5', 0);
    # 2
    my $Bf   = $mcg->transform('Bb2', '', 3);
    my $Bf7  = $mcg->transform('Bb2', '7', 3);
    my $Ef   = $mcg->transform('Eb3', '', 1);
    my $Ef9  = $mcg->transform('Eb3', '9', 0);
    my $D7s9 = $mcg->transform('D3', '7#9', 0);

    $d->rest($d->whole); # while counting-in

    for my $n (1 .. $d->bars) {
        if ($n % 2 == 0) {
            $d->note($d->whole, @$Bfmaj7);
            $d->note($d->whole, @$Dfmaj7);
            $d->note($d->whole, @$Cm7);
            $d->note($d->half,  @$Gm7);
            $d->note($d->half,  @$Af7f5);
        }
        else {
            $d->note($d->whole, @$Bf);
            $d->note($d->whole, @$Bf7);
            $d->note($d->whole, @$Ef);
            $d->note($d->half,  @$Ef9);
            $d->note($d->half,  @$D7s9);
        }
    }
}

sub melody {
    set_chan_patch($d->score, $channel++, $melody_patch);

    my $mdp = Music::Duration::Partition->new(
        size => 4,
        pool => [qw/wn hn dhn dqn qn en/],
#        groups => [0, 0, 2, 2],
    );
    my $motif1 = $mdp->motif;
    print 'Melody motif #1: ', ddc($motif1);
    my $motif2 = $mdp->motif;
    print 'Melody motif #2: ', ddc($motif2);

    my @pitches = (
        get_scale_MIDI($note, 2, $tscale),
        get_scale_MIDI($note, 3, $tscale)
    );
    my @intervals = qw(-4 -3 -2 -1 1 2 3 4);
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    my @notes1 = map { $voice->rand } @$motif1;
    print 'Melody pitches #1: ', ddc(\@notes1);
    my @notes2 = map { $voice->rand } @$motif2;
    print 'Melody pitches #2: ', ddc(\@notes2);
    my @notes3 = map { $voice->rand } @$motif1;
    print 'Melody pitches #3: ', ddc(\@notes3);
    my @notes4 = map { $voice->rand } @$motif2;
    print 'Melody pitches #4: ', ddc(\@notes4);

    $d->rest($d->whole); # while counting-in

    for my $n (1 .. $d->bars) {
        if ($n % 2 == 0) {
            for my $i (0 .. $#$motif2) {
                $d->note($motif2->[$i], $notes1[$i]);
            }
            for my $i (0 .. $#$motif1) {
                $d->note($motif1->[$i], $notes2[$i]);
            }
            for my $i (0 .. $#$motif2) {
                $d->note($motif2->[$i], $notes3[$i]);
            }
            for my $i (0 .. $#$motif1) {
                $d->note($motif1->[$i], $notes4[$i]);
            }
        }
        else {
            for my $i (0 .. $#$motif1) {
                $d->note($motif1->[$i], $notes1[$i]);
            }
            for my $i (0 .. $#$motif2) {
                $d->note($motif2->[$i], $notes2[$i]);
            }
            for my $i (0 .. $#$motif1) {
                $d->note($motif1->[$i], $notes3[$i]);
            }
            for my $i (0 .. $#$motif2) {
                $d->note($motif2->[$i], $notes4[$i]);
            }
        }
    }
}
