#!/usr/bin/perl
#
# List all possible fret fingerings - gene@ology.net
#
use strict;
use warnings;
use Math::Combinatorics;

# See warnings in output context.
$|++;

# Set the size of the fret grid or "the maximum number of frets."
my $frets = shift || 4;
# Set the symbols to use for the fret position.
my $positions = @ARGV ? \@ARGV : [qw( 0 1 2 3 4 )];

# Set the super set of multisets!
my $c = Math::Combinatorics->new(
    count => $frets,
    data => $positions,
    frequency => [ map{ $frets } 1 .. @$positions ],
);

# Line number format width.
my $n = 3; # TODO Compute width with Math::Counting::bcomb()
# Loop counter for fret group.
my $i = 0;

# Visit each multiset.
while (my @m = $c->next_multiset) {
    # Consider each subset.
    my $p = Math::Combinatorics->new(
        data => \@m,
        frequency => [ map{1} @m ],
    );
    # Visit each subset.
    while (my @s = $p->next_string) {
        # Q: Is this a playable group?
        my $flag = 0; # A: Not yet.

        # Consider pairs of the fret group.
        for my $x (1 .. @s - 1) {
            # Less subscrpt referencing.
            my $previous = $s[$x - 1];
            my $current  = $s[$x];

            # The middle-ring finger pair can only span 1 fret.
            # "Next to the adjacent" can only span 2 frets. Etc.
            # TODO This logic restricts all by fret, not finger, yet.
            if ($previous && $current
                && $previous != $current
                && $current >= $previous + 2
            ) {
                $flag++;
                last;
            }
        }

        unless ($flag) {
        # The open position (0) is ignored. Remove zeros.
        my @no_z = grep { defined $_ && $_ } @s;

        if (@no_z >= 2) {
            # Consider pairs of the no-zero fret group.
            for my $x (1 .. @no_z - 1) {
                # Consider the items to the tail.
                my @sliver = @no_z[$x .. @no_z - 1];

                # Higher fret numbers for lower fingers are not allowed.
                if (grep { $no_z[$x - 1] > $_ } @sliver) {
                    $flag++;
                    last;
                }
            }
        }
        }

        # Print the string representation.
        printf "%*d. %s%s\n", $n, ++$i, join(' ', @s), ($flag ? ' u' : '');
    }
}
# Consider the lilies of the field.
print "u Indicates an unplayable fingering\n";

