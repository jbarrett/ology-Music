#!/usr/bin/perl

=head1 NAME

multichoose - List all possible fret fingerings

=head1 DESCRIPTION

This program lists all possible fret fingerings and flags those that are
deemed unplayable.

With the settings below, you can define different sizes for fret groups and
number of available fingers.

These settings are all required, so the defaults are used unless given on the
command_line.

=head1 SYNOPSIS

 $ perl multichoose --version
 $ perl multichoose --help
 $ perl multichoose --man
 $ perl multichoose --frets 2 --range '0 1 2' --fingers 'i m'

=head1 ARGUMENTS

  help|?  - Brief documentation (0)
  man     - Full documentation  (0)
  frets   - Number of frets     (4)
  range   - Fret position range (0 1 2 3 4)
  fingers - Finger symbols      (i m r p)

=head2 NOTES

Range: 0 = No fret, "open string". 4 = Number of frets to consider.

Fingers: i=index m=middle r=ring p=pinky. Options: _=none x=muted *=harmonic

=cut

use strict;
use warnings;

use Getopt::Long;
use List::MoreUtils qw( pairwise );
use Math::Combinatorics;
use Pod::Usage;

our $VERSION = '0.02';

# Set the default values.
my $opt = {
    'help|?' => 0,
    'man'    => 0,
    'frets=i'   => 4,
    'range=s'   => '0 1 2 3 4',
    'fingers=s' => 'i m r p',
};

# See warnings in output context.
$|++;

# Set handy auto-documentation features.
Getopt::Long::Configure(qw( auto_version auto_help ));

# Collect the command-line arguments.
GetOptions($opt, keys %$opt) || pod2usage(-verbose => 0);

# Show documentation if requested.
pod2usage(-verbose => 1) if $opt->{help};
pod2usage(-verbose => 2) if $opt->{man};

# Set unspecified defaults.
set_defaults($opt);

# Make an object to hold all possible fret positions.
my $c = Math::Combinatorics->new(
    count => $opt->{frets},
    data => $opt->{range},
    frequency => [ map{ $opt->{frets} } 1 .. @{$opt->{range}} ],
);

# Line number format width.
my $n = 3; # TODO Compute with Math::Big?

# Loop counter for each fret group used in the final output.
my $i = 0;

# Visit each multiset.
while (my @m = $c->next_multiset) {

    # Make an object to hold this positions fret groups.
    my $p = Math::Combinatorics->new(
        data => \@m,
        frequency => [ map { 1 } @m ],
    );

    # Visit each set.
    while (my @s = $p->next_string) {

        # This is a string to hold reasons why this group is unplayable.
        my $flag = '';

        # Consider adjacent pairs of the fret group.
        for my $x (1 .. @s - 1) {

            # Hide the ugliness of array subscript indexing.
            my $previous = $s[$x - 1];
            my $current  = $s[$x];

            # Rule: Restrict spanning.
            if ($previous && $current && $previous != $current
                && $current >= $previous + 2) {

                $flag = 's'; # Flag a finger span issue.
                last;
            }
        }

        # Proceed if this group has no "play-infractions" flagged.
        unless ($flag) {

            # The open position (0) is ignored. Remove zeros.
            my @no_z = grep { defined $_ && $_ } @s;

            # Is there a pair of elements?
            if (@no_z >= 2) {

                # Consider adjacent pairs of the no-zero fret group.
                for my $x (1 .. @no_z - 1) {

                    # Consider the current tail of no-zero elements.
                    my @sliver = @no_z[$x .. @no_z - 1];

                    # Rule: Higher frets for lower fingers are not allowed.
                    if (grep { $no_z[$x - 1] > $_ } @sliver) {

                        $flag = 'b'; # Flag a backward issue
                        last;
                    }
                }
            }
        }

        # Concatinate pairs of fingers and frets.
        my @limited = @{$opt->{fingers}}[0 .. @s - 1];
        my @pairs;
        {
            # XXX Can't make this not warn yet...
            no warnings 'once';
            @pairs = pairwise { $a . $b } @limited, @s;
        }

        # Print a string representation of the fret group.
        printf "%*d. %s %s\n", $n, ++$i, join(' ', @pairs), $flag;
    }
}

sub set_defaults {
    # Intake a Go::L spec=>default hashref of settings.
    my $setting = shift;

    # Inspect each option and add the setting if needed.
    for my $spec (keys %$setting) {

        # Extract the option label from the Go::L spec.
        (my $label = $spec) =~ s/^(\w+)\b.+$/$1/;

        # Add the default, if not already given.
        $setting->{$label} ||= $setting->{$spec};

        # Handle list arguments.
        # XXX Hard-coding ahead:
        if ($label eq 'range' || $label eq 'fingers') {
            # Transform a comma or space separated list into an arrayref.
            $setting->{$label} = [ split /,?\s+/, $setting->{$spec} ];
        }
    }
}

__END__

=head1 TO DO

* span=i@ - Adjacent finger span (2 1 2)

(That is, fingers i<->m & r<->p span 2 frets, but m<->r is only 1.)

* start=i - Fret start position (1)

* strings=i - Number of instrument strings (6)

* User defined rules.

=head1 AUTHOR

Gene Boggs, E<lt>gene+music@ology.netE<gt>

=head1 COPYRIGHT

Copyright 2013 Gene Boggs

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of either: the GNU General Public License as published by the Free
Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

