#!/usr/bin/env perl
use strict;
use warnings;

##
# Musical dice game, attributed to Mozart
##

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util);
use MIDI::Util qw(setup_score set_chan_patch);

my $max    = shift || 16; # Number of measures to produce
my $bpm    = shift || 90; # Beats per minute
my $tpatch = shift || 4;  # Treble
my $bpatch = shift || 35; # Bass

# Declare the available measures
my $total_bars = 8;
my @bars  = map { my $sub = 'bart' . $_; \&$sub } 1 .. $total_bars;
my @barsb = map { my $sub = 'barb' . $_; \&$sub } 1 .. $total_bars;

# Setup the MIDI score
my $score = setup_score(bpm => $bpm);

# Choose the measures to play
my @choices;
for (0 .. $max - 1) {
    push @choices, int rand @bars;
}

# Define the procedures to actually play the chosen measures
my $tproc = sub {
    set_chan_patch($score, 0, $tpatch);
    $bars[$_]->() for @choices;
};
my $bproc = sub {
    set_chan_patch($score, 1, $bpatch);
    $barsb[$_]->()for @choices;
};

# Mash the phrases together as MIDI tracks
$score->synch($tproc, $bproc);

# Write the score to a MIDI file
$score->write_score("$0.mid");

# Available measures:

sub bart1 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en F5));
    $score->n(qw(en D5));
    $score->n(qw(en G5));
}
sub barb1 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en F3));
    $score->n(qw(en D3));
    $score->n(qw(en G3));
}
sub bart2 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en A4));
    $score->n(qw(sn Fs4));
    $score->n(qw(sn G4));
    $score->n(qw(sn B4));
    $score->n(qw(sn G5));
}
sub barb2 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn B2 G3));
    $score->r(qw(en));
}
sub bart3 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en G5));
    $score->n(qw(en C5));
    $score->n(qw(en E5));
}
sub barb3 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn C3 E3));
    $score->r(qw(en));
}
sub bart4 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en G5));
    $score->n(qw(qn D5));
}
sub barb4 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(sn G2));
    $score->n(qw(sn B2));
    $score->n(qw(en G3));
    $score->n(qw(en B2));
}
sub bart5 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn G5 D5 B4 G4));
    $score->r(qw(en));
}
sub barb5 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en G2));
    $score->n(qw(sn B3 G3));
    $score->n(qw(sn G3 F3));
    $score->n(qw(sn Fs3 E3));
    $score->n(qw(sn E3 D3));
}
sub bart6 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en G4));
    $score->n(qw(en C5));
    $score->n(qw(en E5));
}
sub barb6 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn C3 E3));
    $score->r(qw(en));
}
sub bart7 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(sn E5));
    $score->n(qw(sn C5));
    $score->n(qw(sn E5));
    $score->n(qw(sn G5));
    $score->n(qw(sn C6));
    $score->n(qw(sn G5));
}
sub barb7 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn C3 G3));
    $score->r(qw(en));
}
sub bart8 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(qn C5));
    $score->r(qw(en));
}
sub barb8 {
    print '', (caller(0))[3], "\n";
    $score->n(qw(en C3));
    $score->n(qw(en G2));
    $score->n(qw(en C2));
}
