#!/usr/bin/env perl
use strict;
use warnings;

# Blues-jazz (Jazz-blues?) chord progression practice tool
# Taken from the chart devised by Dan Haerle
# Available in the Jamey Aebersold "Jazz Handbook"

use Data::Dumper::Compact qw(ddc);
use Getopt::Long qw(GetOptions);
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-MelodicDevice-Transposition); # local author libs
use MIDI::Drummer::Tiny ();
use MIDI::Util qw(set_chan_patch midi_format);
use Music::Chord::Note ();
use Music::MelodicDevice::Transposition ();

my %opts = (
    tonic   => 'C', # note to transpose things to
    octave  => 4,   # octave of chord notes
    patch   => 5,   # 0=piano, etc general midi
    bpm     => 90,  # beats per minute
    bars    => 12,  # number of 4/4 bars
    repeat  => 1,   # number of times to repeat
    percent => 20,  # approximate half-note percentage
    verbose => 0,
);
GetOptions( \%opts, 
    'tonic=s',
    'octave=i',
    'patch=i',
    'bpm=i',
    'bars=i',
    'repeat=i',
    'verbose',
);

my $d = MIDI::Drummer::Tiny->new(
    file   => "$0.mid",
    bars   => $opts{bars},
    bpm    => $opts{bpm},
    reverb => 15,
);

$d->sync(
    \&drums,
    \&chords,
);

$d->write;

sub drums {
    $d->metronome44swing($d->bars * $opts{repeat});
    $d->note($d->whole, $d->kick, $d->ride1);
}

sub chords {
    set_chan_patch($d->score, 0, $opts{patch});

    my $md = Music::MelodicDevice::Transposition->new;
    my $cn = Music::Chord::Note->new;

    # all chords in C initially
    my $transpose = $cn->scale($opts{tonic});

    my @bars = bars();
    my %net  = net();

    my @specs;

    for my $n (0 .. $d->bars - 1) {
        my @pool = $bars[ $n % @bars ]->@*;
        my $chord = $pool[ int rand @pool ];
        my $new_chord = transposition($transpose, $chord, $md);
        my @notes = $cn->chord_with_octave($new_chord, $opts{octave});

        my $names = $new_chord;

        my @spec;

        if (rand() < $opts{percent} / 100) {
            push @spec, [ $d->half, @notes ];

            @pool = $net{$chord}->@*;
            $chord = $pool[ int rand @pool ];
            my $new_chord = transposition($transpose, $chord, $md);
            @notes = $cn->chord_with_octave($new_chord, $opts{octave});

            $names .= "-$new_chord";

            push @spec, [ $d->half, @notes ];
        }
        else {
            push @spec, [ $d->whole, @notes ];
        }

        printf '%*d. %13s: %s', length($opts{bars}), $n + 1, $names, ddc(\@spec) if $opts{verbose};
        push @specs, @spec;
    }

    for (1 .. $opts{repeat}) {
        $d->note(midi_format(@$_)) for @specs;
    }

    my $new_chord = transposition($transpose, $bars[0][0], $md);
    my @notes = $cn->chord_with_octave($new_chord, $opts{octave});
    (my $lower = $notes[0]) =~ s/\d/$opts{octave} - 1/e;
    $d->note($d->whole, midi_format($lower, @notes));
}

sub transposition {
    my ($transpose, $chord, $md) = @_;
    if ($transpose && $chord =~ /^([A-G][#b]?)(.*)$/) {
        my $note = $1;
        my $flav = $2;
        my $transposed = $md->transpose($transpose, [$note]);
        (my $new_note = $transposed->[0]) =~ s/^([A-G][#b]?).*$/$1/;
        my $new_chord = $new_note . $flav;
        return $new_chord;
    }
    return $chord;
}

sub bars {
    no warnings qw(qw);
    return (
        [qw( C7 CM7 C#m7 )],
        [qw( C7 F7 Bm7 FM7 C#m7 )],
        [qw( C7 Am7 Em7 BM7 )],
        [qw( C7 Gm7 Dbm7 AbM7 )],
        [qw( F7 FM7 )],
        [qw( F7 Bb7 Gbm7 Gbdim7 Fm7 )],
        [qw( C7 Em7 EbM7 EM7 )],
        [qw( C7 A7 Bb7 Ebm7 Em7 )],
        [qw( G7 D7 Dm7 Ab7 DbM7 DM7 )],
        [qw( G7 F7 Abm7 Db7 Dm7 DbM7 )],
        [qw( C7 Em7 FM7 )],
        [qw( C7 G7 Dm7 Ab7 Abm7 DM7 )],
    );
}

sub net {
    no warnings qw(qw);
    return (
        'A7'     => [qw( Ebm7 D7 Dm7 Ab7 DM7 Abm7 )],
        'Ab7'    => [qw( DbM7 Dm7 G7 )],
        'AbM7'   => [qw( GbM7 )],
        'Abm7'   => [qw( Db Gm7 Db7 )],
        'Am7'    => [qw( D7 Abm7 )],
        'B7'     => [qw( C7 Em7 EM7 Bb7 )],
        'BM7'    => [qw( BbM7 )],
        'Bb7'    => [qw( C7 Ebm7 Em7 EbM7 A7 )],
        'Bbm7'   => [qw( Am7 )],
        'Bm7'    => [qw( E7 Bbm7 )],
        'C#m7'   => [qw( Gb7 )],
        'C7'     => [qw( C7 F7 Gm7 FM7 A7 Em7 B7 G7 Dm7 Ab7 )],
        'CM7'    => [qw( Bm7 FM7 C#m7 Ebm7 AbM7 )],
        'D7'     => [qw( Gm7 Dbm7 )],
        'DM7'    => [qw( DbM7 Db )],
        'Db7'    => [qw( C7 CM7 )],
        'DbM7'   => [qw( Dm7 CM7 )],
        'Dbm7'   => [qw( Gb7 )],
        'Dm7'    => [qw( Dbm7 G7 Db7 Db )],
        'E7'     => [qw( Am7 )],
        'EM7'    => [qw( Em7 )],
        'EbM7'   => [qw( Ebm7 DM7 )],
        'Ebm7'   => [qw( Ab7 Dm7 Ebm7 )],
        'Em7'    => [qw( Dm7 A7 Ebm7 Edim7 )],
        'Edim7'  => [qw( Dm7 )],
        'F7'     => [qw( C7 Bb7 Eb7 Gbm7 Gbdim7 Em7 )],
        'FM7'    => [qw( Em7 Fm7 Gbm7 )],
        'Fm7'    => [qw( Em7 Bb7 )],
        'G7'     => [qw( G7 F7 Abm7 C7 Em7 )],
        'Gb7'    => [qw( Bm7 BM7 FM7 )],
        'GbM7'   => [qw( FM7 )],
        'Gbm7'   => [qw( B7 )],
        'Gbdim7' => [qw( Em7 )],
        'Gm7'    => [qw( C7 Gb7 )],
    );
}
