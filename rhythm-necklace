#!/usr/bin/env perl
use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny);
use MIDI::Drummer::Tiny;
use Math::Trig ();
use SVG qw(title);

use constant PI     => 2 * atan2(1,0);
use constant HALF   => PI / 2;
use constant DOUBLE => 2 * PI;

my $phrase   = shift || 'x..x..x...x.x...'; # pattern to render (default: son)
my $diameter = shift || 512; # size of the circle

my $show_marks  = length $phrase; # circular beat marks to display
my $total_marks = 60; # maximum number of beat markers
my $fill        = 'white';
my $beat_fill   = 'gray';
my $border      = 'green';
# NB: Changing the border_size and beat_radius apparently messes up placement
my $border_size = 15; # chart margin
my $beat_radius = 11; # radius for beat-circle markings
my $radius      = $diameter / 2;
my $frame_size  = $diameter + 2 * $border_size;

my $i = 0;
my %onsets; # beats to draw
for my $beat (split //, $phrase) {
    $onsets{$i}++ if $beat eq 'x';
    $i++;
}

my $svg = SVG->new(
    width  => $frame_size,
    height => $frame_size,
);
$svg->title()->cdata('Rhythm Necklace');

my $style = $svg->group(
    id    => 'style-group',
    style => {
        stroke => $border,
        fill   => $fill,
    },
);

$style->circle(
    id => 'style-group-circle',
    cx => $frame_size / 2,
    cy => $frame_size / 2,
    r  => $radius,
);

# compute the circle positions
my @marks = map { $_ * $total_marks / $show_marks } 0 .. $show_marks - 1;

# keep track of the beat coordinates
my @coordinates;

my $offset = $beat_radius + $border_size / 3;

$i = 0;

# display the beat positions
for my $mark (@marks) {
    my $p = coordinate($mark, $total_marks, $radius);
    push @coordinates, $p if $onsets{$i};

    $style->circle(
        id    => $mark . '-style-group-beat-circle',
        cx    => $p->[0] + $offset,
        cy    => $p->[1] + $offset,
        r     => $beat_radius,
        style => {
            fill => $onsets{$i} ? $beat_fill : $fill,
        },
    );

    $i++;
}

# render the beat polygon
my $xv = [ map { $_->[0] + $offset } @coordinates ];
my $yv = [ map { $_->[1] + $offset } @coordinates ];
my $points = $svg->get_path(
    x     => $xv,
    y     => $yv,
    -type => 'polygon',
);
$svg->polygon(
    %$points,
    id    => 'beat-polygon',
    style => {
        fill => $beat_fill,
    },
);

print $svg->xmlify;

my $d = MIDI::Drummer::Tiny->new(
   file   => "$0.mid",
   bpm    => 120,
   volume => 120,
   bars   => 4,
   reverb => 15,
);

for my $bar (1 .. $d->bars) {
    for my $beat (split //, $phrase) {
        if ($beat eq 'x') {
            $d->note($d->eighth, $d->claves);
        }
        else {
            $d->rest($d->eighth);
        }
        $i++;
    }
}

$d->write;

sub coordinate {
    my ($p, $total, $radius) = @_;

    # compute the analog minute time equivalent
    my $analog = $p / $total * DOUBLE - HALF;

    # get the coordinate of the time value
    my $coord = [
        $radius + $radius * cos($analog),
        $radius + $radius * sin($analog)
    ];

    return $coord;
}
