#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact 'ddc';
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny Music-Duration Music-Duration-Partition);
use MIDI::Drummer::Tiny;
use Music::Duration::Partition;

my $bpm = shift || 120;

my $d = MIDI::Drummer::Tiny->new(
    file   => "$0.mid",
    bpm    => $bpm,
    volume => 100,
    bars   => 4,
);

$d->score->synch(
    \&hihat,
    \&kick,
    \&snare,
);

$d->write;

sub hihat {
    for my $n (1 .. $d->bars) {
        my $mdp = Music::Duration::Partition->new(
            size => 4,
            pool => [qw(qn en)],
        );
        my $motif = $mdp->motif;
        print 'Hihat: ', ddc($motif);

        for my $n (1 .. $d->bars) {
            for my $duration (@$motif) {
                $d->note($duration, $d->closed_hh);
            }
        }
    }
}

sub kick {
    for my $n (1 .. $d->bars) {
        my $mdp = Music::Duration::Partition->new(
            size => 4,
            pool => [qw(hn dqn qn en)],
        );
        my $motif = $mdp->motif;
        print 'Kick: ', ddc($motif);

        for my $n (1 .. $d->bars) {
            for my $duration (@$motif) {
                $d->note($duration, $d->kick);
            }
        }
    }
}

sub snare {
    for my $n (1 .. $d->bars) {
        my $roll = int rand 2;
        for my $n (1 .. $d->bars) {
            for my $n (1 .. 4) {
                if ($roll) {
                    if ($n % 2 == 0) {
                        $d->note('qn', $d->snare);
                    }
                    else {
                        $d->rest('qn');
                    }
                }
                else {
                    if ($n % 3 == 0) {
                        $d->note('qn', $d->snare);
                    }
                    else {
                        $d->rest('qn');
                    }
                }
            }
        }
    }
}
