#!/usr/bin/env perl
use strict;
use warnings;

use lib '/Users/gene/sandbox/MIDI-Util/lib';
use MIDI::Util; # https://metacpan.org/release/MIDI-Util

use Game::Life;

my $bpm = shift || 100;

my $score = MIDI::Util::setup_score( bpm => $bpm );

my @source = qw/ C D E F G A B /;

# Create a LoL of source notes with incrementing octaves
my $octave = scalar @source;
my $matrix;
while ( $octave ) {
    push @$matrix, [ map { $_ . $octave } @source ];
    $octave--;
}

my $blinker = [
    [ 0, 0, 0 ],
    [ 1, 1, 1 ],
    [ 0, 0, 0 ]
];
my $glider = [
    [ 1, 1, 1 ],
    [ 1, 0, 0 ],
    [ 0, 1, 0 ]
];

my $g = Game::Life->new( scalar @source );
 
# Place the blinker on the grid
#$g->place_points( 2, 2, $blinker );
# Place the glider at the bottom-right of the grid
$g->place_points( 4, 4, $glider );

# Incrementally glide to the top-left of the grid
for my $n ( 1 .. 17 ) {
    print "Iteration $n:\n";

    my $grid = $g->get_grid;

    my @notes;
    my $i = 0;
    for my $row ( @$grid ) {
        my $j = 0;
        # Find the note cluster to add to the score
        for my $cell ( @$row ) {
            push @notes, $matrix->[$i][$j] if $cell;
            $j++;
        }
        $i++;

        print map { $_ ? 'x ' : '. ' } @$row;
        print "\n";
    }

    print "@notes\n";
    print "\n";

    # Add the note cluster and a rest to the score
    $score->n( 'qn', @notes );
    $score->r('qn');

    $g->process;
}

$score->write_score( $0 . '.mid' );
