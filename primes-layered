#!/usr/bin/env perl
use strict;
use warnings;

###
#
# Play the prime numbers modulo the number of notes of the
# given scale in 2 parts: Fast (top) and Long (bottom)
#
# Example:
# perl primes-layered 2048 major 300 0 73; timidity primes.mid
#
# * This tiny program uses global variables. Run away if that
#   frightens you.
#
###

use Math::Prime::XS qw(primes);
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util); # local author directory
use MIDI::Util qw(setup_score set_chan_patch);
use Music::Scales qw(get_scale_MIDI);

use constant BASE   => 'C';  # scale note
use constant WHOLE  => 'wn'; # bottom duration
use constant EIGHTH => 'en'; # top duration
use constant BEATS  => 8;    # number of EIGHTHs in a WHOLE note
use constant BOCT   => 3;    # bottom octave
use constant TOCT   => 5;    # top octave

my $limit  = shift || 1024;    # upper bound of primes
my $scale  = shift || 'major'; # scale of notes
my $bpm    = shift || 100;     # beats per minute
my $tpatch = shift // 4;       # 4=electric piano
my $bpatch = shift // 95;      # 95=synth

my $channel = 0;

my @primes = primes($limit);

my $score = setup_score(bpm => $bpm);

my @phrases = (
    \&top,
    \&bottom,
);

$score->synch(@phrases);

$score->write_score("$0.mid");

sub top {
    print "top()\n";

    set_chan_patch($score, $channel++, $tpatch);

    my @scale = (
        get_scale_MIDI(BASE, TOCT, $scale),
        get_scale_MIDI(BASE, TOCT + 1, $scale),
    );

    prime_loop(\@scale, EIGHTH);
}

sub bottom {
    print "bottom()\n";

    set_chan_patch($score, $channel++, $bpatch);

    my @scale = get_scale_MIDI(BASE, BOCT, $scale);

    prime_loop(\@scale, WHOLE);
}

sub prime_loop {
    my ($scale, $duration) = @_;

    # select the appropriate number of primes
    my @loop = $duration eq WHOLE
        ? @primes[ 0 .. @primes / BEATS ]
        : @primes;

    my $i = 0;

    for my $p (@loop) {
        $i++;

        my $mod  = $p % @$scale;
        my $note = $scale->[$mod];

        print "\t$i. P: $p, Mod: $mod, Note: $note\n";

        $score->n($duration, $note);
    }
}
