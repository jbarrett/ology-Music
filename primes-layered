#!/usr/bin/env perl
use strict;
use warnings;

###
#
# Play the prime numbers modulo the number of notes of the given scale
# in 2 parts: Fast (top) and Long (bottom)
#
# Example:
# perl primes-layered 2048 major 300 0 73; timidity primes.mid
#
# * This tiny program uses global variables. Run away if that frightens you.
#
###

use Math::Prime::XS qw(primes);
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util);
use MIDI::Util qw(setup_score set_chan_patch);
use Music::Scales qw(get_scale_MIDI);

use constant BASE  => 'C';  # scale note
use constant WHOLE => 'wn'; # bottom duration
use constant NOTE  => 'en'; # top duration
use constant PARTS => 8;    # number of parts given by the NOTE constant

my $limit   = shift || 1024;
my $scale   = shift || 'major';
my $bpm     = shift || 100;
my $tpatch  = shift // 4;
my $bpatch  = shift // 95;
my $toctave = shift || 5;
my $boctave = shift || 3;

my @primes = primes($limit);

my $score = setup_score(bpm => $bpm);

my @phrases = (
    \&top,
    \&bottom,
);

$score->synch(@phrases);

$score->write_score("$0.mid");

sub top {
    print "top()\n";

    set_chan_patch($score, 0, $tpatch);

    my @scale = (
        get_scale_MIDI(BASE, $toctave, $scale),
        get_scale_MIDI(BASE, $toctave + 1, $scale),
    );

    prime_loop(\@scale, NOTE);
}

sub bottom {
    print "bottom()\n";

    set_chan_patch($score, 1, $bpatch);

    my @scale = get_scale_MIDI(BASE, $boctave, $scale);

    prime_loop(\@scale, WHOLE);
}

sub prime_loop {
    my ($scale, $duration) = @_;

    my @loop;

    @loop = $duration eq WHOLE
        ? @primes[0 .. @primes / PARTS]
        : @primes;

    my $i = 0;

    for my $p (@loop) {
        $i++;

        my $mod = $p % @$scale;
        my $note = $scale->[$mod];

        print "$i. P: $p, Mod: $mod, Note: $note\n";

        $score->n($duration, $note);
    }
}
