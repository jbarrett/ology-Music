#!/usr/bin/perl

our $VERSION = '0.01';

=head1 NAME

picking - List picking groups for stringed instruments

=head1 DESCRIPTION

This program lists all possible picking techniques for one measure of quarter
notes for time signatures 2/2, 3/4 and 4/4.  For higher signatures, use joined,
composite measures.

With the L</ARGUMENTS>, you can define parallel and simultaneous picking
figures.

The symbols for the fingers are from Spanish (de Flamenco).

  thumb  : pulgar  (p)
  index  : índice  (i)
  middle : medular (m)
  ring   : anular  (a)
  little : meñeque (q)

Only the max setting is required, but all the defaults are used unless given.

=head1 SYNOPSIS

 $ perl picking
 $ perl picking -v
 $ perl picking --doc
 $ perl picking --max 3
 $ perl picking -fingers 'i a m q'

=head2 ARGUMENTS

 None | --help | -h | -? : Usage          (0)
 --version | -v : The current version
 --docs    | -d : The full documentation  (0)
 --max     | -m : Maximum number frets    (4)
 --fingers | -f : Finger symbols  (p i m a q)
 --strings | -s : Number of strings       (4)

=cut

use strict;
use warnings;

# See warnings in output context.
$|++;

use Algorithm::Combinatorics qw(
    variations_with_repetition
);
use Getopt::Long;
use List::MoreUtils qw( pairwise );
use Pod::Usage;

# Set the default values.
my $setting = {
    'fingers=s' => 'p i m a q',
    'help|?' => 0,
    'docs' => 0,
    'max=i' => 4,
};

# Harvest with Go::L and call P::U.
setup($setting, \@ARGV);

# Set unspecified defaults.
set_defaults($setting);

# Fret groups (per finger).
my $v = variations_with_repetition($setting->{range}, $setting->{max});

# Line number format width. # TODO Compute instead of hard-coding.
# Loop counter for each fret group shown in the final output.
my ($width, $i) = (3, 0);

# Inspect each position AKA fret group.
while (my $position = $v->next) {

    # Concatinate pairs of fingers and strings.
    my @pairs = finger_string($setting, $position);

    # Print a string representation of the picking group.
    printf "%*d. %s\n", $width, $i++, join(' ', @pairs);
}

sub finger_string { # Concatinate pairs of fingers and strings.

    # The settings and current fret position.
    my($set, $pos) = @_;

    # Don't join fingers with zeros.
    # XXX Can't make this call not warn, yet.
    no warnings 'once';
    return pairwise { sprintf '%2s', $b ? $a . $b : $b }
        @{ $set->{fingers} }, @$pos;
}

sub setup { # Harvest command-line arguments and use magical POD.

    # Intake a Go::L spec=>default hashref of settings.
    my ($set, $args) = @_;

    # Auto-help if we are called with no arguments.
    pod2usage(-verbose => 1) unless @$args;

    # Set handy auto-documentation features.
    Getopt::Long::Configure(qw( auto_version auto_help ));

    # Collect the command-line arguments.
    GetOptions($set, keys %$set) || pod2usage(-verbose => 0);

    # Show documentation if requested.
    pod2usage(-verbose => 1) if $set->{help};
    pod2usage(-verbose => 2) if $set->{docs};
}

sub set_defaults { # Assign either default or given settings.

    # Get the default settings.
    my $set = shift;

    # The split pattern is space or comma separated.
    my $pattern = qr/\s*[,\s]\s*/;

    # Inspect each option and add the setting if needed.
    for my $spec (keys %$set) {

        # Extract the option label from the Go::L spec.
        # TODO Use Go::L::ParseOptionSpec() instead.
        if ($spec =~ /^(\w+)(?:\b\w+?)?$/) {

            # Capture label.
            my $label = $1;

            # If not given, add the default setting.
            $set->{$label} = $set->{$spec} unless defined $set->{$label};
        }
    }

    # Set the original fingers to use and the finger=>number order association.
    my @fingers = split $pattern, ($set->{fingers} || $set->{'fingers=s'});

    # If the max is greater than the number of fingers...
    if ($set->{max} > @fingers) {

        # Set the max to the number of fingers.
        warn "WARNING: Setting max to $set->{max}\n";
        $set->{max} = @fingers;
    }
    else {

        # Else limit the finger list to the max.
        @fingers = @fingers[ 0 .. $set->{max} - 1 ];
    }

    # Set the finger list.
    $set->{fingers} = \@fingers;

    # Turn the number string into a proper array.
    my @indexes = split $pattern, ($set->{indexes} || $set->{'indexes=s'});

    # Limit the indexes list to the max.
    @indexes = @indexes[ 0 .. $set->{max} - 1 ];

    # Make a finger=>number association.
    $set->{indexes} = { pairwise { ($a => $b) } @fingers, @indexes };

    # Set the range unless given.
    $set->{range} = [ 1 .. $set->{max} ] unless exists $set->{range};

    # Prepend 0 (the open position) to the range, if requested.
    unshift @{ $set->{range} }, 0 if $set->{open};
}

__END__

=head1 AUTHOR

Gene Boggs, E<lt>gene+music@ology.netE<gt>

=head1 COPYRIGHT

Copyright 2013 Gene Boggs

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of either: the GNU General Public License as published by the Free
Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

