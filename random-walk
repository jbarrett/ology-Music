#!/usr/bin/env perl
use strict;
use warnings;

use Graph::Weighted;
use List::Util::WeightedChoice qw( choose_weighted );
use MIDI::Simple;

my $n = shift || 4;
my $initial = shift // 0;

my $treble = Graph::Weighted->new();
$treble->populate(
    {
        0 => { label => 'C5',  2 => 0.4, 6 => 0.6 },
        1 => { label => 'D5',  3 => 0.4, 4 => 0.6 },
        2 => { label => 'Ds5', 1 => 0.5, 3 => 0.5 },
        3 => { label => 'F5',  5 => 0.4, 4 => 0.6 },
        4 => { label => 'G5',  2 => 0.4, 3 => 0.6 },
        5 => { label => 'Gs5', 4 => 0.4, 6 => 0.6 },
        6 => { label => 'As5', 0 => 0.4, 3 => 0.6 },
    }
);

my $bass = Graph::Weighted->new();
$bass->populate(
    {
        0 => { label => 'C3',  2 => 0.4, 3 => 0.6 },
        1 => { label => 'Ds3', 2 => 0.5, 3 => 0.5 },
        2 => { label => 'F3',  0 => 0.4, 3 => 0.6 },
        3 => { label => 'G3',  0 => 0.4, 2 => 0.6 },
        4 => { label => 'As3', 0 => 0.4, 1 => 0.6 },
    }
);

my $duration = Graph::Weighted->new();
$duration->populate(
    {
        0 => { label => 'qn', 2 => 0.4, 6 => 0.6 },
        1 => { label => 'en', 3 => 0.4, 4 => 0.6 },
        2 => { label => 'qn', 1 => 0.5, 3 => 0.5 },
        3 => { label => 'qn', 5 => 0.4, 4 => 0.6 },
        4 => { label => 'qn', 2 => 0.4, 3 => 0.6 },
        5 => { label => 'en', 4 => 0.4, 6 => 0.6 },
        6 => { label => 'qn', 0 => 0.4, 3 => 0.6 },
    }
);

my $velocity = Graph::Weighted->new();
$velocity->populate(
    {
        0 => { label => 'mezzo', 2 => 0.4, 6 => 0.6 },
        1 => { label => 'mf',    3 => 0.4, 4 => 0.6 },
        2 => { label => 'mezzo', 1 => 0.5, 3 => 0.5 },
        3 => { label => 'mezzo', 5 => 0.4, 4 => 0.6 },
        4 => { label => 'mezzo', 2 => 0.4, 3 => 0.6 },
        5 => { label => 'mf',    4 => 0.4, 6 => 0.6 },
        6 => { label => 'mezzo', 0 => 0.4, 3 => 0.6 },
    }
);

my $score = setup_midi();

my $n_vertex = $initial;
my $b_vertex = $initial;
my $d_vertex = $initial;
my $v_vertex = $initial;

for my $i ( 1 .. $n ) {
    my $treb = $treble->get_vertex_attribute( $n_vertex, 'label' );
    my $low  = $bass->get_vertex_attribute( $b_vertex, 'label' );
    my $dura = $duration->get_vertex_attribute( $d_vertex, 'label' );
    my $velo = $velocity->get_vertex_attribute( $v_vertex, 'label' );

    $score->n( $velo, $dura, $treb, $low );

    if ( $i < $n ) {
        $n_vertex = next_vertex( $treble, $n_vertex );
        $b_vertex = next_vertex( $bass, $b_vertex );
        $d_vertex = next_vertex( $duration, $d_vertex );
        $v_vertex = next_vertex( $velocity, $v_vertex );
    }
}

$score->write_score( $0 . '.mid' );

sub setup_midi {
    my %args = (
        lead_in => 4,
        channel => 1,
        patch   => 42,
        volume  => 120,
        @_,
    );
    my $score = MIDI::Simple->new_score();
    $score->Volume($args{volume});
    # Lead-in
    $score->Channel(9);
    $score->n( 'qn', $args{patch} ) for 1 .. $args{lead_in};
    # Passage
    $score->Channel($args{channel});
    $score->patch_change( $args{channel}, $args{patch} );
    return $score;
}

sub next_vertex {
    my ( $g, $vertex ) = @_;

    my $successors = [];

    for my $successor ( $g->successors($vertex) ) {
        push @$successors, {
            vertex => $successor,
            weight => $g->get_cost( [ $vertex, $successor ] ),
        };
   }

    my $choice = choose_weighted( $successors, sub{ $_[0]->{weight} } );

    return $choice->{vertex};
}
