#!/usr/bin/env perl
use strict;
use warnings;

use Graph::Weighted;
use List::Util::WeightedChoice qw( choose_weighted );
use MIDI::Simple;

my $n = shift || 4;
my $initial = shift // 0;

my $gw = Graph::Weighted->new();
$gw->populate(
    {
        0 => { pitch => 'C4',  2 => 0.4, 6 => 0.6 },
        1 => { pitch => 'D4',  3 => 0.4, 4 => 0.6 },
        2 => { pitch => 'Ds4', 1 => 0.5, 3 => 0.5 },
        3 => { pitch => 'F4',  5 => 0.4, 4 => 0.6 },
        4 => { pitch => 'G4',  2 => 0.4, 3 => 0.6 },
        5 => { pitch => 'Gs4', 4 => 0.4, 6 => 0.6 },
        6 => { pitch => 'As4', 0 => 0.4, 3 => 0.6 },
    },
    'note'
);

my $score = setup_midi();

my $vertex = $initial;

for ( 1 .. $n ) {
    my $note = $gw->get_vertex_attribute( $vertex, 'pitch' );
    $score->n( 'qn', $note );
    $vertex = next_vertex( $gw, $vertex, 'note' );
}

$score->write_score( $0 . '.mid' );

sub setup_midi {
    my %args = (
        lead_in => 4,
        channel => 1,
        patch   => 42,
        volume  => 120,
        @_,
    );
    my $score = MIDI::Simple->new_score();
    $score->Volume($args{volume});
    # Lead-in
    $score->Channel(9);
    $score->n( 'qn', $args{patch} ) for 1 .. $args{lead_in};
    # Passage
    $score->Channel($args{channel});
    $score->patch_change( $args{channel}, $args{patch} );
    return $score;
}

sub next_vertex {
    my ( $gw, $vertex, $attr ) = @_;

    my $successors = [];

    for my $successor ( $gw->successors($vertex) ) {
        push @$successors, {
            vertex => $successor,
            weight => $gw->get_cost( [ $vertex, $successor ], $attr ),
        };
    }

    my $choice = choose_weighted( $successors, sub{ $_[0]->{weight} } );

    return $choice->{vertex};
}
