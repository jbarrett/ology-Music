#!/usr/bin/env perl
use strict;
use warnings;

use Algorithm::Combinatorics qw( variations combinations permutations );
use List::Util qw( shuffle );
use lib '/Users/gene/sandbox/MIDI-Util/lib';
use MIDI::Util;
 
my $treb  = shift || '0 C5 E5 G5'; # 0 = rest
my $bass  = shift || 'C3 F3 G3'; # Notes only - no rests
my $bpm   = shift || 120;
my $trebp = shift || 69; # Treble patch
my $bassp = shift || 42; # Bass patch
my $flag  = shift || 'v'; # variations or combinations or permutations
my $shuf  = shift || 0;

my @treb = split /\s+/, $treb;
my @bass = split /\s+/, $bass;

my $quarter = 'qn';
my $whole   = 'wn';

my $size = 0; # Number of score events

my $score = MIDI::Util::setup_score( bpm => $bpm );

$score->synch(
    \&variance,
    \&legato,
);

$score->n( $whole, $bass[0] );

$score->write_score( "$0.mid" );

sub variance {
    MIDI::Util::set_chan_patch( $score, 0, $trebp );

    my $count = 0;

    for my $n ( 1 .. @treb ) {
        my @items;
        if ( $flag eq 'v' ) {
            @items = variations( \@treb, $n );
        }
        elsif ( $flag eq 'p' ) {
            @items = permutations(\@treb);
        }
        elsif ( $flag eq 'c' ) {
            @items = combinations( \@treb, $n );
        }

        for my $i (@items) {
            $count++;

            @$i = shuffle @$i
                if $shuf;

            print "$count. @$i\n";

            for my $note ( @$i ) {
                if ( $note eq '0' ) {
                    $score->r($quarter);
                }
                else {
                    $score->n( $quarter, $note );
                }

                $size++;
            }
        }
    }
}

sub legato {
    MIDI::Util::set_chan_patch( $score, 1, $bassp );
    $score->Volume(60);

    $score->n( $whole, $bass[ int rand @bass ] )
        for 1 .. $size / 4;
}
