#!/usr/bin/env perl
use strict;
use warnings;

use Data::Turtle;
use MIDIUtil;

my $rule       = shift || 2,
my $iterations = shift || 4;
my $string     = shift || 'F';
my $distance   = shift || 'qn';
my $theta      = shift || 2;

my %rules = (
    # Branches: start=X, distance=20, theta=20
    1 => {
        X => 'YF[-X][+X]',
        Y => 'F',
    },

    # Koch curve: start=F, distance=10, theta=90
    2 => {
        F => 'F+F-F-F+F',
    },

    # Fractal plant: start=X, distance=3, theta=25
    3 => {
        X => 'F[-X][X]F[-X]+FX',
        F => 'FF',
    },

    # Dragon curve: start=FX, distance=10, theta=90
    4 => {
        X => 'X+YF+',
        Y => '-FX-Y',
    },

    # Sierpiński arrowhead curve: start=F, distance=1, theta=60
    5 => {
        F => 'G-F-G',
        G => 'F+G+F',
    },

    # Sierpiński triangle: start=F-G-G, distance=4, theta=120
    6 => {
        F => 'F-G+F+G-F',
        G => 'GG',
    },

    # Koch snowflake: start=F++F++F, , distance=3, theta=60
    7 => {
        F => 'F-F++F-F',
        X => 'FF',
    },

    # Sierpiński carpet: start=F, distance=4, theta=90
    8 => {
        F => 'F+F-F-F-G+F+F+F-F',
        G => 'GGG',
    },

    # Koch island: start=F-F-F-F, distance=5, theta=90
    9 => {
        F => 'F-F+F+FF-F-F+F',
    },

    # Koch islands and lakes: start=F+F+F+F, distance=5, theta=90
    10 => {
        F => 'F+f-FF+F+FF+Ff+FF-f+FF-F-FF-Ff-FFF',
        f => 'ffffff',
    },

    # Grid: start=F-F-F-F, distance=5, theta=90
    11 => {
        F => 'FF-F-F-F-FF',
    },

    # Terndrils: start=F-F-F-F, distance=5, theta=90
    12 => {
        F => 'FF-F--F-F',
    },
);

my $score = MIDIUtil::setup_midi( patch => 0, bpm => 300 );

my $note = 60;

my $turtle = Data::Turtle->new;

my @statestack;

my %translate = (
    'F' => sub { $score->n( $distance, $note ) },
    'G' => sub { $score->n( $distance, $note ) },
    '-' => sub { $note -= $theta },
    '+' => sub { $note += $theta },
    '[' => sub { push @statestack, [ $turtle->get_state ] },
    ']' => sub { $turtle->set_state( @{ pop @statestack } ) },
);

for ( 1 .. $iterations ) {
    $string =~ s/(.)/defined($rules{$rule}{$1}) ? $rules{$rule}{$1} : $1/eg;
}
warn "$string\n";

for my $command ( split //, $string ) {
    $translate{$command}->() if exists $translate{$command};
}

$score->write_score( $0 . '.mid' );
