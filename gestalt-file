#!/usr/bin/env perl
use strict;
use warnings;

# Inspect the pitch and velocity boundaries for each channel

use MIDI;
use Music::Gestalt;
use Music::Note;

my $file = shift || die "Usage: perl $0 /some/file.mid\n";

my $opus = MIDI::Opus->new( { from_file => $file } );

my $i = 0;

# Convert tracks to score
for my $t ( $opus->tracks ) {
    my @events = $t->events;

    my %seen;

    for my $e ( @events ) {
        if ($e->[0] eq 'note_on') {
            push @{ $seen{ $e->[2] } }, $e;
        }
    }
    next unless keys %seen;

    $i++;

    for my $c ( sort { $a <=> $b } keys %seen ) {
        my $score_r = MIDI::Score::events_r_to_score_r( $seen{$c} );
        $score_r = MIDI::Score::sort_score_r($score_r);

        my $g = Music::Gestalt->new( score => $score_r );

        my $note = Music::Note->new( $g->PitchLowest, 'midinum' );
        my $low  = $note->format('midi');
        $note    = Music::Note->new( $g->PitchHighest, 'midinum' );
        my $high = $note->format('midi');
        $note    = Music::Note->new( $g->PitchMiddle, 'midinum' );
        my $mid  = $note->format('midi');

        print "Track:\t\t$i\n";
        print "Events:\t\t", scalar( @{ $seen{$c} } ), "\n";
        print "Channel:\t$c\n";
        print "Pitch:",
            "\t\tRange: $low to $high\n",
            "\t\tSpan: $mid +/- ", $g->PitchRange, "\n";
        print "Velocity:",
            "\tRange: ", $g->VelocityLowest, ' to ', $g->VelocityHighest, "\n",
            "\t\tSpan: ", $g->VelocityMiddle, ' +/- ', $g->VelocityRange, "\n\n";
    }
}
