#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact 'ddc';
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration-Partition);
use MIDI::Drummer::Tiny;
use MIDI::Util;
use Music::Duration::Partition;
use Music::Scales;
use Music::VoiceGen;

my $beats  = shift || 4;
my $bars   = shift || 16;
my $bpm    = shift || 105;
my $note   = shift || 'A';
my $bscale = shift || 'pminor';
my $tscale = shift || 'minor';
my $bpatch = shift || 35;
my $tpatch = shift || 0;

my $octave = 1;

my $d = MIDI::Drummer::Tiny->new(
    file      => "$0.mid",
    bpm       => $bpm,
    signature => $beats . '/4',
    bars      => $bars,
#    kit       => 25,
);

$d->score->synch(
    \&drums,
    \&bass,
    \&top,
);

$d->write;

sub bass {
    MIDI::Util::set_chan_patch($d->score, 1, $bpatch);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw(hn dqn qn)],
#        weights => [2, 1],
    );

    my @phrases = map { { motif => $mdp->motif } } 1 .. 2;

    my @pitches = (
        get_scale_MIDI($note, $octave, $bscale),
#        get_scale_MIDI($note, $octave + 1, $bscale),
    );
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => [qw(-4 -3 -2 -1 1 2 3 4)],
    );

    for my $phrase (@phrases) {
        push $phrase->{voices}->@*, [ map { $voice->rand } $phrase->{motif}->@* ];
        push $phrase->{voices}->@*, [ map { $voice->rand } $phrase->{motif}->@* ];
    }

    for my $n (1 .. $d->bars) {
        my $phrase = $phrases[int rand @phrases];
        my $voices = ($phrase->{voices}->@*)[int rand $phrase->{voices}->@*];
        for my $n (0 .. $phrase->{motif}->@* - 1) {
            $d->note($phrase->{motif}[$n], $voices->[$n]);
        }
    }

    $d->note($d->whole, $pitches[0]);
}

sub top {
    MIDI::Util::set_chan_patch($d->score, 0, $tpatch);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw(hn qn en)],
        weights => [1, 2, 3],
    );

    my @phrases = map { { motif => $mdp->motif } } 1 .. 4;

    my @pitches = (
        get_scale_MIDI($note, $octave + 2, $bscale),
        get_scale_MIDI($note, $octave + 3, $bscale),
    );
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => [qw(-4 -3 -2 -1 1 2 3 4)],
    );

    for my $phrase (@phrases) {
        push $phrase->{voices}->@*, [ map { $voice->rand } $phrase->{motif}->@* ];
        push $phrase->{voices}->@*, [ map { $voice->rand } $phrase->{motif}->@* ];
    }

    for my $n (1 .. $d->bars) {
        my $phrase = $phrases[int rand @phrases];
        my $voices = ($phrase->{voices}->@*)[int rand $phrase->{voices}->@*];
        for my $n (0 .. $phrase->{motif}->@* - 1) {
            $d->note($phrase->{motif}[$n], $voices->[$n]);
        }
    }

    $d->note($d->whole, $pitches[0]);
}

sub drums {
    $d->count_in;
#    my $x = $d->bars * 4;
#    if ($beats == 3) {
#        $d->metronome34($x);
#    }
#    elsif ($beats == 4) {
#        $d->metronome44($x);
#    }
#    elsif ($beats == 5) {
#        $d->metronome54($x);
#    }
#    elsif ($beats == 7) {
#        $d->metronome74($x);
#    }
#    else {
#        die 'Invalid beats';
#    }

    $d->note($d->whole, $d->crash1, $d->kick);
}
