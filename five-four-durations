#!/usr/bin/env perl
use strict;
use warnings;

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration-Partition);
use MIDI::Drummer::Tiny;
use MIDI::Util;
use Music::Scales;
use Music::VoiceGen;
use Music::Duration::Partition;

my $note   = shift || 'A';
my $octave = shift || 1;
my $scale  = shift || 'pminor';
my $bpm    = shift || 105;
my $beats  = shift || 5;

my $d = MIDI::Drummer::Tiny->new(
    file      => "$0.mid",
    bpm       => $bpm,
    signature => '5/4',
    kick      => 'n36', # Override default patch
    snare     => 'n40', # "
);

$d->score->synch(
    \&drums,
    \&bass,
    \&top,
);

$d->write;

sub bass {
    MIDI::Util::set_chan_patch($d->score, 1, 35);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw/ hn dqn qn /],
    );
    my $motif1 = $mdp->motif;
    my $motif2 = $mdp->motif;

    my @pitches = get_scale_MIDI($note, $octave, $scale);
    my @intervals = qw(-3 -2 -1 1 2 3);
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    my @notes1 = map { $voice->rand } @$motif1;
    my @notes2 = map { $voice->rand } @$motif2;

    for my $n (1 .. $d->bars * 2) {
        for my $i (0 .. $#$motif1) {
            $d->note($motif1->[$i], $n % 2 ? $notes1[$i] : $notes2[$i]);
        }

        for my $i (0 .. $#$motif2) {
            $d->note($motif2->[$i], $n % 2 ? $notes1[$i] : $notes2[$i]);
        }
    }

    for my $n (1 .. $d->bars / 2) {
        $d->note($d->quarter, $pitches[0]);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->eighth);
        $d->note($d->quarter, $pitches[0]);
        $d->note($d->quarter, $pitches[0]);
        $d->rest($d->eighth);
    }
}

sub top {
    MIDI::Util::set_chan_patch($d->score, 0, 4);

    my $mdp = Music::Duration::Partition->new(
        size => $beats,
        pool => [qw/ dqn qn en /],
    );
    my $motif1 = $mdp->motif;
    my $motif2 = $mdp->motif;

    my @pitches = (
        get_scale_MIDI($note, $octave + 1, 'minor'),
        get_scale_MIDI($note, $octave + 2, 'minor')
    );
    my @intervals = qw(-4 -3 -2 -1 1 2 3 4);
    my $voice = Music::VoiceGen->new(
        pitches   => \@pitches,
        intervals => \@intervals,
    );

    my @pitches2 = get_scale_MIDI($note, $octave + 3, 'minor');
    @intervals = qw(-2 -1 1 2);
    my $voice2 = Music::VoiceGen->new(
        pitches   => \@pitches2,
        intervals => \@intervals,
    );

    my @notes1 = map { $voice->rand } @$motif1;
    my @notes2 = map { $voice->rand } @$motif1;
    my @notes3 = map { $voice->rand } @$motif2;
    my @notes4 = map { $voice2->rand } @$motif2;

    for my $n (1 .. $d->bars * 2) {
        for my $i (0 .. $#$motif1) {
            $d->note($motif1->[$i], $n % 2 ? $notes1[$i] : $notes2[$i]);
        }

        for my $i (0 .. $#$motif2) {
            $d->note($motif2->[$i], $n % 4 == 0 ? $notes4[$i] : $notes3[$i]);
        }
    }
}

sub drums {
    $d->metronome54($d->bars * 4);

    for my $n (1 .. $d->bars / 2) {
        $d->note($d->quarter, $d->closed_hh, $d->kick);
        $d->note($d->quarter, $d->closed_hh, $d->kick);
        $d->note($d->quarter, $d->closed_hh);
        $d->note($d->quarter, $d->closed_hh, $d->snare);
        $d->note($d->quarter, $d->closed_hh);
    }
}
