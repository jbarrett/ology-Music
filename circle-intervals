#!/usr/bin/env perl
use strict;
use warnings;

# Evenly space a number of named sub-circles around a circle

use Math::Trig ();
use Music::Scales qw(get_scale_notes);
use SVG qw(title);

use constant PI     => 2 * atan2(1,0);
use constant HALF   => PI / 2;
use constant DOUBLE => 2 * PI;

my $interval   = shift || 1;
my $show_marks = shift || 12;
my $diameter   = shift || 512;

my $total_marks = 60;
my $border_size = 10;
my $sub_radius  = 10;
my $radius      = $diameter / 2;
my $frame_size  = $diameter + 2 * $border_size;

my @scale = get_scale_notes('C', 'chromatic');

my @labels = map { $scale[ (($_ - 1) * $interval) % @scale ] }
    1 .. ($show_marks + 1) * $interval;

my $svg = SVG->new(
    width  => $frame_size,
    height => $frame_size,
);
$svg->title()->cdata("Show $show_marks marks around a circle");

# use explicit element constructor to generate a group element
my $style1 = $svg->group(
    id    => 'style1-group',
    style => {
        stroke => 'gray',
        fill   => 'white',
    },
);

$style1->circle(
    cx => $frame_size / 2,
    cy => $frame_size / 2,
    r  => $radius,
    id => 'style1-group-outer-circle',
);

my $i = 0;

my @marks = map { $_ * $total_marks / $show_marks } 1 .. $show_marks;

for my $mark (@marks) {
    $i++;

    my $p = time_point($mark, $total_marks, $radius);

    $style1->circle(
        id => $mark . '-style1-group-outer-sub-circle',
        cx => $p->[0] + $sub_radius,
        cy => $p->[1] + $sub_radius,
        r  => $sub_radius,
    );
    $style1->text(
        id     => $i . '-style1-group-outer-sub-text',
        x      => $p->[0] + $sub_radius - ($sub_radius / 2),
        y      => $p->[1] + $sub_radius + ($sub_radius / 2),
        -cdata => $labels[$i],
    );
}
 
$style1->circle(
    cx => $frame_size / 2,
    cy => $frame_size / 2,
    r  => $radius - $sub_radius * 3,
    id => 'style1-group-inner-circle',
);

$i = 0;

for my $mark (@marks) {
    $i++;

    my $p = time_point($mark, $total_marks, $radius - $sub_radius * 3, 1);

    $style1->circle(
        id => $mark . '-style1-group-inner-sub-circle',
        cx => $p->[0] + $sub_radius * 4,
        cy => $p->[1] + $sub_radius * 4,
        r  => $sub_radius,
    );
    $style1->text(
        id     => $i . '-style1-group-inner-sub-text',
        x      => $p->[0] + $sub_radius * 3 + 3,
        y      => $p->[1] + $sub_radius * 3 + $sub_radius + 3,
        -cdata => $labels[$i],
    );
}
 
print $svg->xmlify;

sub time_point {
    my ($p, $total, $radius, $inner) = @_;

    # Compute the analog minute time equivalent
    $p = $p / $total * DOUBLE - HALF;

    # Replace the time value with the polar coordinate
    if ($inner) {
        $p = [
            $radius + $radius * cos($p - 1),
            $radius + $radius * sin($p - 1)
        ];
    }
    else {
        $p = [
            $radius + $radius * cos($p),
            $radius + $radius * sin($p)
        ];
    }

    return $p;
}
