#!/usr/bin/env perl
use strict;
use warnings;

# Evenly space a number of named sub-circles around a circle

use Math::Trig;
use SVG;

use constant PI     => 2 * atan2(1,0);
use constant HALF   => PI / 2;
use constant DOUBLE => 2 * PI;

my $show_marks = shift || 60;
my $diameter   = shift || 512;

my $total_marks = 60;
my $border_size = 10;
my $sub_radius  = 10;
my $radius      = $diameter / 2;
my $frame_size  = $diameter + 2 * $border_size;

my $svg = SVG->new(
    width  => $frame_size,
    height => $frame_size,
);
$svg->title()->cdata("$show_marks marks around a circle");
 
# use explicit element constructor to generate a group element
my $style1 = $svg->group(
    id    => 'style1-group',
    style => {
        stroke => 'gray',
        fill   => 'white',
    },
);
 
$style1->circle(
    cx => $frame_size / 2,
    cy => $frame_size / 2,
    r  => $radius,
    id => 'circle_in_group_y',
);

my $i = 0;

my @marks = map { $_ * $total_marks / $show_marks } 1 .. $show_marks;
for my $mark (@marks) {
    $i++;

    my $p = time_point($mark);

    $style1->circle(
        id => $mark . '-sub_circle',
        cx => $p->[0] + $sub_radius,
        cy => $p->[1] + $sub_radius,
        r  => $sub_radius,
    );
    $style1->text(
        id     => $mark . '-sub_text',
        x      => $p->[0] + $sub_radius - ($sub_radius / 2),
        y      => $p->[1] + $sub_radius + ($sub_radius / 2),
        -cdata => $i,
    );
}
 
print $svg->xmlify;

sub time_point {
    my ($p) = @_;

    # Compute the analog minute time equivalent
    $p = $p / $total_marks * DOUBLE - HALF;

    # Replace the time value with the polar coordinate
    $p = [
        $radius + $radius * cos $p,
        $radius + $radius * sin $p
    ];

    return $p;
}
