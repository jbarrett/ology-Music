#!/usr/bin/env perl
use strict;
use warnings;

use lib '/Users/gene/sandbox/Music';
use Bach;

use Graph::Easy;

my $id = shift || '003907bv';

# From https://archive.ics.uci.edu/ml/datasets/Bach+Choral+Harmony
my $file = shift || '/Users/gene/Documents/data/jsbach_chorals_harmony/jsbach_chorals_harmony.data';

# Read-in the chord progression of each song
my (undef, $progression) = Bach::read_bach( $file, 0 );
#use Data::Dumper;warn(__PACKAGE__,' ',__LINE__," MARK: ",Dumper$progression); exit;

# Find the bigrams of the chord progression
my %seen;
my $last = '';

for my $song ( keys %$progression ) {
    next unless $song eq $id;

    for my $cluster ( @{ $progression->{$song} } ) {
        my ($notes, $bass, $chord) = split /,/, $cluster;

        if ( $last && !grep { $last eq $_ } @{ $seen{$chord} } ) {
            push @{ $seen{$chord} }, $last;
        }

        $last = $chord;
    }
}
#use Data::Dumper;warn(__PACKAGE__,' ',__LINE__," MARK: ",Dumper\%seen); exit;

# Make a network graph of the chord progression
my $graph = Graph::Easy->new();

for my $i ( keys %seen ) {
    my $from = Graph::Easy::Node->new( name => $i );

    for my $j ( @{ $seen{$i} } ) {
        my $to = Graph::Easy::Node->new( name => $j );
        $graph->add_edge( $from, $to );
    }
}

print $graph->as_graphviz();
# perl % > bach-choral-network.dot
# dot -Tpng bach-choral-network.dot > bach-choral-network.png
# open bach-choral-network.png
