#!/usr/bin/env perl
#
# "Musimathics" pg. 358 - Voss's Method
#
use strict;
use warnings;

use lib '/Users/gene/sandbox/MIDI-Util/lib';
use MIDI::Util;

my $max = shift || 16;

my @tnotes = qw( C5 Ds5 F5 G5 As5 );
my @bnotes = qw( C3 F3 G3 C4 );

my $score = MIDI::Util::setup_score();

$score->synch(
    \&treble,
    \&bass,
);

$score->write_score("$0.mid");

sub treble {
    MIDI::Util::set_chan_patch( $score, 0, 0 );

    my @tseed = map { rand_range( 0, 1 ) } 1 .. 4;

    for my $n ( 0 .. $max - 1 ) {
        my $note = $tnotes[ sprintf( '%.0f', voss( $n, \@tseed ) ) ];
        $score->n( 'qn', $note );
    }
}

sub bass {
    MIDI::Util::set_chan_patch( $score, 1, 32 );

    my @bseed = map { rand_range( 0, 1 ) } 1 .. 4;

    for my $n ( 0 .. ( $max / 2 ) - 1 ) {
        my $note = $bnotes[ sprintf( '%.0f', voss( $n, \@bseed ) ) ];
        $score->n( 'hn', $note );
    }
}

sub voss {
    my ( $n, $list ) = @_;

    my $sum = 0;

    for my $k ( 0 .. @$list - 1 ) {
        if ( ( $n % ( 2 ** $k ) ) == 0 ) {
            $list->[$k] = rand_range( -1, 1 );
        }

        $sum += $list->[$k];
    }

    return $sum;
}

sub rand_range {
    my ( $lower, $upper ) = @_;
    return rand() * ( $upper - $lower ) + $lower;
}
