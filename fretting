#!/usr/bin/perl

our $VERSION = '0.0701';

=head1 NAME

fretting - List all possible fret positions

=head1 DESCRIPTION

This program lists all possible fret positions and flags those that are deemed
unplayable.

With the L</ARGUMENTS>, you can define fret group sizes and the number (and
name) of available fingers.  Additionally, you can show unplayable fingerings
and the reasons: A B<B>ackwards or reverse fingering and finger B<S>pan
impossibilities.

The symbols for the fingers are from Spanish (de Flamenco).

  index  : índice  (i)
  middle : medular (m)
  ring   : anular  (a)
  little : meñeque (q)
  thumb  : pulgar  (p)

Only the max setting is required, but all the defaults are used unless given.

=head1 SYNOPSIS

 $ perl fretting
 $ perl fretting -v
 $ perl fretting --doc
 $ perl fretting --max 3
 $ perl fretting -m 3 --open
 $ perl fretting -m 4 --unplayable --debug
 $ perl fretting -m 4 -o -u -e --accumulate
 $ perl fretting -fingers 'x y'
 $ perl fretting -f 'x y z' -u

=head2 ARGUMENTS

 None | --help | -h | -? : Usage              (0)
 --version    | -v : The current version
 --docs       | -d : The full documentation   (0)
 --debug      | -e : "Elicit" progress        (0)
 --max        | -m : Maximum number frets     (4)
 --fingers    | -f : Finger symbols   (i m a q p)
 --open       | -o : Use the open position    (0)
 --unplayable | -u : Show flagged fret groups (0)
 --accumulate | -a : Tally all infractions    (0)

=cut

use strict;
use warnings;

# See warnings in output context.
$|++;

use Algorithm::Combinatorics qw(
    variations_with_repetition
);
use Getopt::Long;
use List::MoreUtils qw( pairwise );
use Pod::Usage;

# Set the default values.
my $setting = {
    'fingers=s' => 'i m a q p',
    'help|?' => 0,
    'docs' => 0,
    'debug|e' => 0,
    'max=i' => 4,
    'open' => 0,
    'unplayable' => 0,
    'accumulate' => 0,
};

# Harvest with Go::L and call P::U.
setup($setting, \@ARGV);

# Set unspecified defaults.
set_defaults($setting);

# Fret groups (per finger).
my $v = variations_with_repetition($setting->{range}, $setting->{max});

# Line number format width. # TODO Compute instead of hard-coding.
# Loop counter for each fret group shown in the final output.
my ($width, $i) = (3, 0);

# Inspect each position AKA fret group.
while (my $position = $v->next) {

    # Flag unplayable fret groups.
    my $flag = infraction($setting, $position);

    # Concatinate pairs of fingers and frets.
    my @pairs = finger_fret($setting, $position);

    # Print a string representation of the fret group.
    printf("%*d. %s %s\n", $width, $i++, join(' ', @pairs), ($flag ? "-$flag" : $flag))
        if !$flag || ($flag && $setting->{unplayable});
}

sub infraction { # Flag unplayable fingerings.

    # The position to consider.
    my($set, $pos) = @_;

    # Declare the flag to return.
    # " a holder for the last seen position.
    # " a location counter.
    # " a finger counter.
    my ($flag, $previous, $loc, $fcount) = ('', undef, 0, 0);

    # Inspect pairs of the position.
    for my $current (@$pos) {

        # Set the first item of the pair and move on.
        if (not defined $previous) {
            $previous = $current;
            next;
        }

        # Increment the 1st position (since we've seen at least one).
        $loc++;

        # Increment the finger counter.
        $fcount++;

        # Skip all pairs with zeros.
        if ($current && $previous) {

            # Set the previous and current fingers.
            my $seen = $fcount ? $set->{fingers}[$fcount - 1] : '?';
            my $finger = $set->{fingers}[$fcount] || '?';

            # Show our progress if requested.
            if ($set->{debug}) {
                warn "Finger: $seen($set->{indexes}{$seen}), $finger($set->{indexes}{$finger})\n";
                warn "Fret:     $previous,    $current\n";
            }
            # Rule: Higher frets for adjacent lower fingers are not allowed.
            if ($previous > $current) {
                $flag .= 'B'; # Flag a backward issue.
                last unless $set->{accumulate};
            }

            # Are we the "middle pair?"
            my $mid = ($set->{indexes}{$seen} == 2 && $set->{indexes}{$finger} == 3)
                   || ($set->{indexes}{$seen} == 3 && $set->{indexes}{$finger} == 2);

            # Rule: Fingers spanning more than N fret(s) is not allowed.
            if ($current >= $previous + 2 && $mid) {
                $flag .= 'S'; # Flag a finger span issue.
                last unless $set->{accumulate};
            }
        }

        # Update the previously seen item.
        $previous = $current;
    }

    # Return any infractions.
    return $flag;
}

sub finger_fret { # Concatinate pairs of fingers and frets.

    # The settings and current fret position.
    my($set, $pos) = @_;

    # Don't join fingers with zeros.
    # XXX Can't make this call not warn, yet.
    no warnings 'once';
    return pairwise { sprintf '%2s', $b ? $a . $b : $b }
        @{ $set->{fingers} }, @$pos;
}

sub setup { # Harvest command-line arguments and use magical POD.

    # Intake a Go::L spec=>default hashref of settings.
    my ($set, $args) = @_;

    # Auto-help if we are called with no arguments.
    pod2usage(-verbose => 1) unless @$args;

    # Set handy auto-documentation features.
    Getopt::Long::Configure(qw( auto_version auto_help ));

    # Collect the command-line arguments.
    GetOptions($set, keys %$set) || pod2usage(-verbose => 0);

    # Show documentation if requested.
    pod2usage(-verbose => 1) if $set->{help};
    pod2usage(-verbose => 2) if $set->{docs};
}

sub set_defaults { # Assign either default or given settings.

    # Get the default settings.
    my $set = shift;

    # The split pattern is space or comma separated.
    my $pattern = qr/\s*[,\s]\s*/;

    # Get the initial finger list.
    my @fingers = split $pattern, $set->{'fingers=s'};

    # Fingers begin with 1. 0 would mean "No finger" wich is handled by --open.
    my @indexes = 1 .. @fingers;

    # Make a finger=>number association.
    $set->{indexes} = { pairwise { ($a => $b) } @fingers, @indexes };

    # Inspect each option and add the setting if needed.
    for my $spec (keys %$set) {

        # Extract the option label from the Go::L spec.
        # TODO Use Go::L::ParseOptionSpec() instead.
        if ($spec =~ /^(\w+)(?:\b\w+?)?$/) {

            # Capture label.
            my $label = $1;

            # If not given, add the default setting.
            $set->{$label} = $set->{$spec} unless defined $set->{$label};
        }
    }

    # Set the original fingers to use and the finger=>number order association.
    @fingers = split $pattern, $set->{fingers} if exists $set->{fingers};

    # If the max is greater than the number of fingers...
    if ($set->{max} > @fingers) {

        # Set the max to the number of fingers.
        warn "WARNING: Setting max to $set->{max}\n" if $set->{debug};
        $set->{max} = @fingers;
    }
    else {

        # Else limit the finger list to the max.
        @fingers = @fingers[ 0 .. $set->{max} - 1 ];
    }

    # Set the finger list.
    $set->{fingers} = \@fingers;

    # Set the range over which to vary.
    $set->{range} = [ 1 .. $set->{max} ];

    # Prepend 0 (the open position) to the range, if requested.
    unshift @{ $set->{range} }, 0 if $set->{open};
}

__END__

=head1 EXAMPLES

 $ perl fretting -m 2
   0. i1 m1
   1. i1 m2
   2. i2 m2

 $ perl fretting -m 2 -o
   0.  0  0
   1.  0 m1
   2.  0 m2
   3. i1  0
   4. i1 m1
   5. i1 m2
   6. i2  0
   7. i2 m2

 $ perl fretting -m 2 -o -u
  0.  0  0
  1.  0 m1
  2.  0 m2
  3. i1  0
  4. i1 m1
  5. i1 m2
  6. i2  0
  7. i2 m1 B
  8. i2 m2

 $ perl fretting -m 3 -o -u -a
   0.  0  0  0 
   1.  0  0 r1 
  ...
  28. i1 m3  0 S
  29. i1 m3 r1 SB
  30. i1 m3 r2 SB
  31. i1 m3 r3 S
  ...
  62. i3 m3 r2 B
  63. i3 m3 r3 

 $ perl fretting -m 4 -u -a
    0. i1 m1 r1 p1 
    1. i1 m1 r1 p2 
    2. i1 m1 r1 p3 S
  ...
  253. i4 m4 r4 p2 B
  254. i4 m4 r4 p3 B
  255. i4 m4 r4 p4

=head1 TO DO

* start=i - Fret start position (1)

* strings=i - Number of instrument strings (6)

* Allow less fingers than the max.

=head1 AUTHOR

Gene Boggs, E<lt>gene+music@ology.netE<gt>

=head1 COPYRIGHT

Copyright 2013 Gene Boggs

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of either: the GNU General Public License as published by the Free
Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

