#!/usr/bin/perl

our $VERSION = '0.11';

=head1 NAME

fretting - List all possible fret and barre positions

=head1 DESCRIPTION

This program lists all possible fret and barre fingering positions and flags
those that are deemed unplayable.

With the L</ARGUMENTS>, you can define fret group sizes, the number (and names)
of available fingers.  Also, you can show unplayable fingerings and the reasons:
B<B>ackwards or reverse fingering, finger B<S>pan impossibilities and barre
finger overlaps.  Also, the "open position" and "finger muting" can be shown.

The symbols for the fingers are from Spanish (de Flamenco).

  index  : índice  (i)
  middle : medular (m)
  ring   : anular  (a)
  little : meñeque (q)
  thumb  : pulgar  (p)

There are a few special cases that are handled by the L</infraction> routine.
Specifically the middle and ring fingers cannot span more than a fret
comfortably.  Also, certain "backwards" fret positions cannot physically by
played.  Also, the thumb can only play or mute the leftmost fret (which
corresponds to the bottom string of an instrument) and mute the "2nd left-most."

Only the max setting is required, but all the defaults are used unless given.

=head1 SYNOPSIS

 $ perl fretting
 $ perl fretting -v
 $ perl fretting --doc
 $ perl fretting --max 3
 $ perl fretting -m 3 --open
 $ perl fretting -m 3 --muted
 $ perl fretting -m 4 --unplayable --debug
 $ perl fretting -m 4 -o -u -d --accumulate
 $ perl fretting -fingers 'x y'
 $ perl fretting -f 'x y z' -u
 $ perl fretting -m 3 --barre -u -a

=head2 ARGUMENTS

 None | --help | -h | -? : Usage               (0)
 --version     | -v : The current version
 --docs        | -c : The full documentation   (0)
 --debug       | -d : Show progress            (0)
 --max=i       | -m : Maximum number frets     (4)
 --fingers=s   | -f : Finger symbols   (i m a q p)
 --open        | -o : Use the open position    (0)
 --muted       | -x : Mute with a finger       (0)
 --unplayable  | -u : Show flagged fret groups (0)
 --accumulate  | -a : Tally all infractions    (0)
 --barre       | -b : Use single finger spans  (0)

=cut

use strict;
use warnings;

# See warnings in output context.
$|++;

use Algorithm::Combinatorics qw(
    variations_with_repetition
);
use Getopt::Long;
use List::MoreUtils qw( pairwise );
use Pod::Usage;

use constant BACKWARD_INFRACTION => 'B';
use constant OVERLAP_INFRACTION  => 'O';
use constant SPAN_INFRACTION     => 'S';

# Set the default values.
my $setting = {
    'accumulate' => 0,
    'barre'      => 0,
    'debug|d'    => 0,
    'docs|c'     => 0,
    'fingers=s'  => 'i m a q p',
    'help|?'     => 0,
    'max|m=i'    => 4,
    'muted|x'    => 0,
    'open'       => 0,
    'unplayable' => 0,
};

# Harvest with Go::L and call P::U.
setup($setting, \@ARGV);

# Set unspecified defaults.
set_defaults($setting);

# Fret groups (per finger).
my $v = variations_with_repetition($setting->{range}, $setting->{max});

# Line number format width. # TODO Compute instead of hard-coding.
# Loop counter for each fret group shown in the final output.
my ($width, $i) = (3, 0);

# Increment our counter unless --open or -muted are given.
$i++ unless $setting->{open} || $setting->{muted};

# Inspect each position AKA fret group.
while (my $position = $v->next) {

    # Flag unplayable fret groups.
    my @flags = infraction($setting, $position);

    # Concatinate pairs of fingers and frets.
    my @pairs = finger_fret($setting, $position);

    # Print a string representation of the fret group.
    printf("%*d. %s %s\n",
        $width, $i++,
        join(' ', @pairs),
        (@flags ? '-' . join(',', @flags) : '')
    ) if !@flags || $setting->{unplayable};
}

sub infraction { # Flag unplayable fingerings.

    # The position to consider.
    my($set, $pos) = @_;

    # Declare the flag to return.
    # " a holder for the last seen position.
    # " a finger counter.
    # Declare the "too wide" span offset.
    my ($flag, $previous, $count, $span) = ([], undef, 0, 2);

    # Declare a bucket to keep track of fingers and their fret positions.
    my $track = {};

    # Inspect pairs of the position.
    # This is referred to by `last` unless we are accumulating.
    FLAG: for my $current (@$pos) {

        # TODO Flag if thumb plays any but the bottom or mutes the next.

        # Set the first item of the pair and move on.
        if (not defined $previous) {
            $previous = $current;
            next;
        }

        # Increment the finger counter.
        $count++;

        # Skip pairs with zeros i.e. the 0th fret i.e. an open string.
        if ($current && $previous) {

            # Set the previous and current fingers.
            my $seen   = $count ? $set->{fingers}[$count - 1] : '?';
            my $finger = $set->{fingers}[$count] || '?';

            # Keep track of the fingers and their frets.
            $track->{$seen}   = $previous unless exists $track->{$seen};
            $track->{$finger} = $current  unless exists $track->{$finger};

            # Show our progress if requested.
            if ($set->{debug}) {

                warn sprintf "Finger: %s(%d) %s(%d)\nFret:%6d%5d\n",
                    $seen, $track->{$seen},
                    $finger, $track->{$finger},
                    $previous, $current;
            }

            # Rule: Overlapping frets are not allowed.
            if ($set->{barre} && $previous == $current) {

                push @$flag, OVERLAP_INFRACTION;
                last FLAG unless $set->{accumulate};
            }

            # Rule: Middle finger pairs with wide fret spans are not allowed.
            if (exists $track->{m} && exists $track->{a}
                && (abs($track->{a} - $track->{m}) > 1)) {

                push @$flag, SPAN_INFRACTION;
                last FLAG unless $set->{accumulate};
            }

            # Collect the fingers that have already been seen.
            my @seen = grep { exists $track->{$_} }
                @{ $set->{fingers} }[ 0 ..  $set->{indexes}{$seen} - 1 ];

            # Loop over the seen fingers.
            for my $s (@seen) {

                # Rule: Lower fingers on higher frets are not allowed.
                #       Higher fingers on lower "
                if (($track->{$s} > $current
                        && ($set->{indexes}{$s} <= $set->{indexes}{$finger}))
                    ||
                    ($track->{$s} < $current
                        && ($set->{indexes}{$s} >= $set->{indexes}{$finger}))
                ) {

                    push @$flag, BACKWARD_INFRACTION;
                    last FLAG unless $set->{accumulate};
                }
            }
        }

        # Update the previously seen item.
        $previous = $current;
    }

    # Return the list of infractions found.
    return @$flag;
}

sub finger_fret { # Concatinate pairs of fingers and frets.

    # The settings and current fret position.
    my($set, $pos) = @_;

    # Don't join fingers with zeros.
    # XXX Can't make this call not warn, yet.
    no warnings 'once';

    # Change zeros to x's if --muted
    if ($set->{muted}) {
        @$pos = map { $_ ? $_ : 'x' } @$pos;
    }

    # Return the (possibly single) pairs, in a width of 2 columns.
    return pairwise { sprintf '%2s', $b ? $a . $b : $b }
        @{ $set->{fingers} }, @$pos;
}

sub setup { # Harvest command-line arguments and use magical POD.

    # Intake a Go::L spec=>default hashref of settings.
    my ($set, $args) = @_;

    # Auto-help if we are called with no arguments.
    pod2usage(-verbose => 1) unless @$args;

    # Set handy auto-documentation features.
    Getopt::Long::Configure(qw( auto_version auto_help ));

    # Collect the command-line arguments.
    GetOptions($set, keys %$set) || pod2usage(-verbose => 0);

    # Show documentation if requested.
    pod2usage(-verbose => 1) if $set->{help};
    pod2usage(-verbose => 2) if $set->{docs};
}

sub set_defaults { # Assign either default or given settings.

    # Get the default settings.
    my $set = shift;

    # The split pattern is space or comma separated.
    my $pattern = qr/\s*[,\s]\s*/;

    # Get the initial finger list.
    my @fingers = split $pattern, $set->{'fingers=s'};

    # Fingers are 1 based. 0 means no finger, handled by --open & --muted.
    my @indexes = 1 .. @fingers;

    # Make a finger=>number association.
    $set->{indexes} = { pairwise { ($a => $b) } @fingers, @indexes };

    # Inspect each option and add the setting if needed.
    for my $spec (keys %$set) {

        # Extract the option label from the Go::L spec.
        # TODO Use Go::L::ParseOptionSpec() instead.
        if ($spec =~ /^(\w+)(?:\b\w+?)?$/) {

            # Capture label.
            my $label = $1;

            # If not given, add the default setting.
            $set->{$label} = $set->{$spec} unless defined $set->{$label};
        }
    }

    # Set the original fingers to use and the finger=>number order association.
    @fingers = split $pattern, $set->{fingers} if exists $set->{fingers};

    # If the max is greater than the number of fingers...
    if (not $set->{max} or $set->{max} > @fingers) {

        # Set the max to the number of fingers.
        $set->{max} = @fingers;
        warn "WARNING: Setting max to $set->{max}\n" if $set->{debug};
    }
    else {

        # Else limit the finger list to the max.
        @fingers = @fingers[ 0 .. $set->{max} - 1 ];
    }

    # Set the finger list.
    $set->{fingers} = \@fingers;

    # Set the range over which to vary.
    $set->{range} = [ 1 .. $set->{max} ];

    # Prepend 0 (the open position) to the range, if requested.
    unshift @{ $set->{range} }, 0 if $set->{open} || $set->{muted};
}

__END__

=head1 EXAMPLES

 $ perl fretting -m 2
   0. i1 m1
   1. i1 m2
   2. i2 m2

 $ perl fretting -m 2 -o
   0.  0  0
   1.  0 m1
   2.  0 m2
   3. i1  0
   4. i1 m1
   5. i1 m2
   6. i2  0
   7. i2 m2

 $ perl fretting -m 2 -o -u
  0.  0  0
  1.  0 m1
  2.  0 m2
  3. i1  0
  4. i1 m1
  5. i1 m2
  6. i2  0
  7. i2 m1 B
  8. i2 m2

 $ perl fretting -m 3 -o -u -a
   0.  0  0  0 
   1.  0  0 r1 
  ...
  28. i1 m3  0 S
  29. i1 m3 r1 SB
  30. i1 m3 r2 SB
  31. i1 m3 r3 S
  ...
  62. i3 m3 r2 B
  63. i3 m3 r3 

 $ perl fretting -m 4 -u -a
    0. i1 m1 r1 p1 
    1. i1 m1 r1 p2 
    2. i1 m1 r1 p3 S
  ...
  253. i4 m4 r4 p2 B
  254. i4 m4 r4 p3 B
  255. i4 m4 r4 p4

 $ perl fretting m 3 -b -u -a
  0. TODO

=head1 TO DO

* start=i - Fret start position (1)

* Allow less fingers than the max.

=head1 AUTHOR

Gene Boggs, E<lt>gene+music@ology.netE<gt>

=head1 COPYRIGHT

Copyright 2013 Gene Boggs

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of either: the GNU General Public License as published by the Free
Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=cut

