#!/usr/bin/env perl

# Capture MIDI events and send text or keystrokes to the console.
# Please see the config file: capture-midi.yaml in this same directory.
# Also, you'll need the programs aseqdump and xdotool.

use strict;
use warnings;

use YAML::XS qw(LoadFile);

my $config = LoadFile("$0.yaml");

my $DEBUG  = shift // $config->{debug};
my $device = shift || $config->{device};

my @dump_tool = qw(aseqdump -p);
my @type_tool = qw(xdotool type);
my @key_tool  = qw(xdotool key);

open(my $midi, '-|', @dump_tool, $device)
    or die "Can't fork: $!";
warn "PID: $$\n" if $DEBUG;

while (my $line = readline($midi)) {
#    print $line; next;
    chomp $line;

    if ($line =~ /^
                  \s*
                  ([\d:]+)
                  \s+
                  (\w+(?:\s\w+)?(?:\s\w+)?)
                  \s+
                  .+?
                  $/ax
    ) {
        my ($source, $event) = ($1, $2);
        warn "S: $source | E: $event\n" if $DEBUG;

        my ($channel, $data);

        if (
            ($event =~ /^Note \w+$/a || $event =~ /^\w+ change$/a || $event eq 'Pitch bend' || $event eq 'Channel aftertouch')
            && $line =~ /^
                         \s*
                         [\d:]+
                         \s+
                         \w+(?:\s\w+)?(?:\s\w+)?
                         \s+
                         (\d+),
                         \s
                         (.+?)
                         $/ax
        ) {
            ($channel, $data) = ($1, $2);
            warn "C: $channel | D: $data\n" if $DEBUG;

            my @cmd;

            for my $entry ($config->{triggers}->@*) {
                if (
                    $event eq $entry->{event} && $data =~ /$entry->{data}/
                    && (!$entry->{channel} || $channel == $entry->{channel})
                ) {
                    if (exists $entry->{text}) {
                        @cmd = (@type_tool, $entry->{text});
                    }
                    elsif (exists $entry->{key}) {
                        @cmd = (@key_tool, $entry->{key});
                    }
                    last;
                }
            }

            if (@cmd) {
                system(@cmd) == 0
                    or die "system(@cmd) failed: $?";
            }
        }
        elsif (
            ($event eq 'Song position pointer' || $event eq 'System exclusive')
            && $line =~ /^
                         \s*
                         [\d:]+
                         \s+
                         \w+(?:\s\w+)?(?:\s\w+)?
                         \s+
                         (.+?)
                         $/ax
        ) {
            $data = $1;
            warn "D: $data\n" if $DEBUG;
        }
    }
    else {
        warn "L: $line\n" if $DEBUG;
    }
}

close $midi
    or die "Bad @dump_tool: $! $?";

__END__
Source  Event                  Ch  Data
 20:0   Note on                 0, note 60, velocity 58
 20:0   Note off                0, note 60, velocity 0
 20:0   Program change         15, program 31
 20:0   System exclusive           F0 7F 7F 06 01 F7
 20:0   Song position pointer      value 0
 20:0   Start
 20:0   Stop
 20:0   Control change         15, controller 28, value 127
 20:0   Control change         15, controller 28, value 0
