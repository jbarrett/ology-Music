#!/usr/bin/env perl
use strict;
use warnings;

# Attempt to simulate a wind-chime

use Collision::2D qw(hash2circle dynamic_collision);
use MIDI::Util qw(setup_score);

my $max = shift || 32;  # Number of times to detect collisions
my $bpm = shift || 100; # "Wind speed"

my $score = setup_score(lead_in => 0, bpm => $bpm, patch => 14);

my @chimes = (
    { chime => hash2circle({ x => 0,  y => 4,  radius => 1 }), note => 'C5' }, # N
    { chime => hash2circle({ x => 4,  y => 0,  radius => 1 }), note => 'F5' }, # E
    { chime => hash2circle({ x => 0,  y => -4, radius => 1 }), note => 'G5' }, # S
    { chime => hash2circle({ x => -4, y => 0,  radius => 1 }), note => 'C6' }, # W
);

my $duration = 'sn';

for my $i (1 .. $max) {
    my ($xv, $yv) = (randv(), randv());
    printf "%d. xv = %5.2f, yv = %5.2f\n", $i, $xv, $yv;

    my $clapper = hash2circle({ x => 0, y => 0, radius => 2, xv => $xv, yv => $yv });

    for my $c (@chimes) {
        my $collision = dynamic_collision($clapper, $c->{chime});

        if ($collision) {
            printf "\tCollision with chime: %s\n", $c->{note};
            $score->n($duration, $c->{note});
        }
        else {
            $score->r($duration);
        }
    }
}

$score->write_score("$0.mid");

sub randv {
    my $x = rand 2;
    my $sign = int rand 2 ? 1 : -1;
    return $x * $sign;
}
