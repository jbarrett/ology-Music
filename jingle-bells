#!/usr/bin/env perl
use strict;
use warnings;

=head1 NAME

jingle-bells

=head1 SYNOPSIS

  $ perl jingle-bells
  $ timidity jingle-bells.mid

=head1 DESCRIPTION

The music at Santa's Workshop...

=head2 SITUATION

Santa was growing tired of the music piped into his workshop.

For example, Jingle Bells was just too ordinary sounding to his ears. It needed a bit of Christmas cheer to pep up the Elves!

Here is what it sounded like:

=for html <audio controls><source src="jingle-bells-plain.mp3" type="audio/mp3">

=cut

use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util Music-MelodicDevice-Ornamentation);
use MIDI::Util qw(setup_score);

use constant MAX => 12; # number of notes before resetting the counter

my $melody = setup_score(bpm => 140);

my @notes = qw(
    qn.E4 qn.E4 hn.E4
    qn.E4 qn.E4 hn.E4
    qn.E4 qn.G4 qn.C4 qn.D4
    wn.E4

    qn.F4 qn.F4 qn.F4 qn.F4
    qn.F4 qn.E4 qn.E4 qn.E4
    qn.E4 qn.D4 qn.D4 qn.E4
    hn.D4       hn.G4

    qn.E4 qn.E4 hn.E4
    qn.E4 qn.E4 hn.E4
    qn.E4 qn.G4 qn.C4 qn.D4
    wn.E4

    qn.F4 qn.F4 qn.F4 qn.F4
    qn.F4 qn.E4 qn.E4 qn.E4
    qn.G4 qn.G4 qn.F4 qn.D4
    wn.C4
);

for my $note (@notes) {
    my @note = split /\./, $note;
    $melody->n(@note);
}

$melody->write_score("$0-plain.mid");

$melody = setup_score(bpm => 140);

=head2 ASSESSMENT

Ordinary to say the least!

Santa asked a couple of his more creative elves to come up with a way to brighten things up musically. And they tinkered, the way elves do...

The cowbell was proposed, but that got shot down quick. Eventually the most musically experienced elf suggested adding "ornamentation" to certain notes. This she said, included commonly heard things like "trills."

(And it is rumoured that she toured as a roadie, in the 60s with Hendrix, The Byrds, Zeppelin, etc.)

After some thinking about B<how> to go about adding ornaments to Jingle Bells, a young guitarist elf pointed to CPAN and the L<Music::MelodicDevice::Ornamentation> module, that seemed to fit the bill perfectly.

Then after reading the examples, the team modified the source and added the module to try it out. Also they listened to each of the ornaments and decided to trigger them from a dispatch table, based on a loop counter.  More sophisticated triggers based on concepts of music theory were considered, but Christmastime was fast approaching!

=cut

use Music::MelodicDevice::Ornamentation;
my $ornament = Music::MelodicDevice::Ornamentation->new(
    scale_note => 'C',
    scale_name => 'major',
);

# Dazzle them with musical oranmentation
my %dazzle = (
    #1 => sub { $ornament->grace_note(@_, -1) },
     3 => sub { $ornament->mordent(@_, 1) },
     6 => sub { $ornament->trill(@_, 2, 1) },
    10 => sub { $ornament->turn(@_, 1) },
);

my $counter = 0;
for my $note (@notes) {
    my @note = split /\./, $note;

    if (exists $dazzle{$counter}) {
        my $fancy = $dazzle{$counter}->(@note);
        $melody->n(@$_) for @$fancy;
    }
    else {
        $melody->n(@note);
    }

    # increment the counter, or start over if we've reached the max
    $counter = $counter == MAX ? 0 : $counter + 1;
}

$melody->write_score("$0-fancy.mid");

=head1 RESULT

And here is the result:

=for html <audio controls><source src="jingle-bells-fancy.mp3" type="audio/mp3">

Santa approved the code review, and the team of intrepid elves went to work implementing ornamentation into the rest of the music system - driven by Perl, of course!

=head2 CODE

  #!/usr/bin/env perl
  use strict;
  use warnings;

  use MIDI::Util qw(setup_score);

  use constant MAX => 12; # number of notes before resetting the counter

  my $melody = setup_score(bpm => 140);

  my @notes = qw(
      qn.E4 qn.E4 hn.E4
      qn.E4 qn.E4 hn.E4
      qn.E4 qn.G4 qn.C4 qn.D4
      wn.E4

      qn.F4 qn.F4 qn.F4 qn.F4
      qn.F4 qn.E4 qn.E4 qn.E4
      qn.E4 qn.D4 qn.D4 qn.E4
      hn.D4       hn.G4

      qn.E4 qn.E4 hn.E4
      qn.E4 qn.E4 hn.E4
      qn.E4 qn.G4 qn.C4 qn.D4
      wn.E4

      qn.F4 qn.F4 qn.F4 qn.F4
      qn.F4 qn.E4 qn.E4 qn.E4
      qn.G4 qn.G4 qn.F4 qn.D4
      wn.C4
  );

  for my $note (@notes) {
      my @note = split /\./, $note;
      $melody->n(@note);
  }

  #$melody->write_score("$0-plain.mid");
  #__END__

  use Music::MelodicDevice::Ornamentation;
  my $ornament = Music::MelodicDevice::Ornamentation->new(
      scale_note => 'C',
      scale_name => 'major',
  );

  # Dazzle them with musical oranmentation
  my %dazzle = (
      #1 => sub { $ornament->grace_note(@_, -1) },
       3 => sub { $ornament->mordent(@_, 1) },
       6 => sub { $ornament->trill(@_, 2, 1) },
      10 => sub { $ornament->turn(@_, 1) },
  );

  my $counter = 0;
  for my $note (@notes) {
      my @note = split /\./, $note;

      if (exists $dazzle{$counter}) {
          my $fancy = $dazzle{$counter}->(@note);
          $melody->n(@$_) for @$fancy;
      }
      else {
          $melody->n(@note);
      }

      # increment the counter, or start over if we've reached the max
      $counter = $counter == MAX ? 0 : $counter + 1;
  }

  $melody->write_score("$0-fancy.mid");

=head1 AUTHOR

"Gene Boggs" <gene@cpan.org>

=cut
