#!/usr/bin/env perl

# Requires Math::Fractal::Noisemaker

use strict;
use warnings;

use Imager;
use MIDI::Simple;
use lib '/Users/gene/sandbox/MIDI-Util/lib';
use MIDI::Util; # https://metacpan.org/release/MIDI-Util

my $type = shift || 'worley'; # Noisemaker type
my $size = shift || 8; # Side width of Noisemaker image

my $file = 'make-noise.png';

system('make-noise', '-out', $file, '-type', $type, '-len', $size, '-format', 'png') == 0
    or die "system failed: $?";

my $img = Imager->new;
$img->read(file => $file) or die $img->errstr;

unlink $file;

my $score = MIDI::Util::setup_score(bpm => 100);

for my $y (0 .. $size - 1) {
    for my $x (0 .. $size - 1) {
        my $color = $img->getpixel(x => $x, y => $y);
        my ($red) = $color->rgba;
        my $n = sprintf '%.0f', normalize($red);
        print "[$x,$y] $red -> $n\n";
        $score->n('qn', $n);
    }
}

$score->write_score("$0.mid");

sub normalize {
    my $m = shift; # Grayscale color to convert to MIDI
    my ($r_min, $r_max) = (0, 255); # Grayscale range
    my ($t_min, $t_max) = (60, 71); # MIDI range starting at middle C
    return (($m - $r_min) / ($r_max - $r_min)) * ($t_max - $t_min) + $t_min;
}
