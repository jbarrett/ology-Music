#!/usr/bin/env perl

# Write up: http://techn.ology.net/hearing-an-image-one-pixel-at-a-time/

use strict;
use warnings;

# Requires https://metacpan.org/pod/Math::Fractal::Noisemaker
use Imager;
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw( Math-Utils-ScaleNumber MIDI-Util );
use Math::Utils::ScaleNumber 'to_range'; # https://github.com/ology/Math-Utils-ScaleNumber
use MIDI::Util; # https://metacpan.org/release/MIDI-Util

my $type = shift || 'worley'; # Noisemaker type
my $size = shift || 8; # Side width of Noisemaker image
my $bpm  = shift || 100; # Beats per minute

# Get a MIDI score
my $score = MIDI::Util::setup_score(bpm => $bpm, patch => 5);

my $file = 'make-noise.png';

# Make a grayscale fractal image
system('make-noise', '-out', $file, '-type', $type, '-len', $size, '-format', 'png') == 0
    or die "system failed: $?";

# Open the image
my $img = Imager->new;
$img->read(file => $file)
    or die "Can't read $file: ", $img->errstr;

# Remove the image file
unlink $file;

my $s_field = length $size;
my $i_field = length($size * $size);

my $i = 0;

# Add a note to the score for each pixel color
for my $y (0 .. $size - 1) {
    for my $x (0 .. $size - 1) {
        $i++;

        my $color = $img->getpixel(x => $x, y => $y);
        my ($red) = $color->rgba;

        # Scale from grays range to MIDI note range
        my $n = sprintf '%.0f', to_range($red, 0, 255, 60, 83);

        printf "%*d. [%*d,%*d] %3d -> %d\n",
            $i_field, $i,
            $s_field, $x, $s_field, $y,
            $red, $n;

        $score->n('qn', $n);
    }
}

$score->write_score("$0.mid");

__END__
Noise Types:

  * white           ## pseudo-random values
  * wavelet         ## band-limited ortho
  * gradient        ## persistent gradient noise
  * simplex         ## continuous gradient noise
  * simplex2        ## interpolated simplex
  * square          ## diamond-square algorithm
  * gel             ## self-displaced smooth
  * sgel            ## self-displaced diamond-square
  * dmandel         ## "deep" mandelbrot
  * djulia          ## "deep" julia
  * dla             ## diffusion-limited aggregation
  * worley          ## voronoi cell noise
  * wgel            ## self-displaced cell noise

  ! multires        ## multi-resolution
  ! ridged          ## ridged multifractal
  ! block           ## unsmoothed multi-res
  ! pgel            ## self-displaced multi-res
  ! fur             ## inspired by "Perlin Worms"
  ! tesla           ## worms/fur variant
