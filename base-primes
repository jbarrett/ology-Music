#!/usr/bin/env perl

# Play the prime numbers as base converted note strings

use strict;
use warnings;

use lib $ENV{HOME} . '/sandbox/MIDI-Util/lib';
use MIDI::Util;
use Math::BaseConvert;
use Math::Prime::XS qw(primes);
use Music::Scales;

my $patch = shift || 42;
my $bpm   = shift || 100;
my $limit = shift || 500;  # Max number of primes
my @scale = @ARGV; # C4 Ds4 F4 G4 As4 C5 <- Example notes to choose from

my $as_chords = 1; # Boolean

if (!@scale) {
    @scale = get_scale_notes('C', 'major');
    @scale = map { $_ . 4 } @scale;
    for (@scale) {
        s/#/s/;
        s/b/f/;
    }
}

my $notes = join '|', @scale;  # "OR regular expression" of scale notes

Math::BaseConvert::dig(\@scale); # Set the base digits to the scale notes

my $score = MIDI::Util::setup_score(patch => $patch, bpm => $bpm);

my $note_count = 0;
my $phrase_count = 0;

# For each prime number...
for my $n (primes($limit)) {
    my $x = cnv($n, 10, scalar(@scale));  # Base-convert the decimal to a note string
    my @phrase = $x =~ /($notes)/g;  # Separate the note string into an array

    # Output the progress:
    printf "%d => %s (%d)\n", $n, join(' ', @phrase), scalar(@phrase);

    if ($as_chords) {
        $score->n('qn', @phrase);
    }
    else {
        $score->n('qn', $_) for @phrase;
    }

    $phrase_count++;
    $note_count += @phrase;
}

$score->n('wn', $scale[0]);

$score->write_score("$0.mid");

print "Total notes: $note_count\n";
print "Total phrases: $phrase_count\n";
