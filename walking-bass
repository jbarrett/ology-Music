#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact qw(ddc);
use List::Util qw(any);
use Music::Chord::Note;
use Music::Note;
use Music::Scales qw(get_scale_notes get_scale_MIDI);
use Music::VoiceGen;

my $chord = shift || 'C7b5'; # Chords of Music::Chord::Note
my $duration = shift || 4; # In quarter notes

my $octave = 2; # We are a bass!

my $scale = $chord =~ /^[A-G][#b]?m/ ? 'minor' : 'major';

# Parse the chord
my $chord_note;
my $flavor;
if ($chord =~ /^([A-G][#b]?)(.*)$/) {
    $chord_note = $1;
    $flavor = $2;
}

my $cn = Music::Chord::Note->new;

my @notes = $cn->chord_with_octave($chord, $octave);

my @pitches = get_scale_MIDI($chord_note, $octave, $scale);

# Guitar constraint
#while ($pitches[0] < 40) {
#    shift @pitches;
#}

# Add unique chord notes to the pitches
my @named = map { Music::Note->new($_, 'midinum')->format('ISO') } @pitches;
for my $n (@notes) {
    if (not any { $_ eq $n } @named) {
        my $x = Music::Note->new($n, 'ISO')->format('midinum');
#        push @pitches, $x unless $x < 40; # Guitar constraint
        push @pitches, $x;
        print "$chord ADDS: $n\n";
    }
}
@pitches = sort { $a <=> $b } @pitches; # Pitches are midi numbers

# Determine if we should skip certain notes given the chord flavor
my @tones = get_scale_notes($chord_note, $scale);
print "SCALE: ",ddc(\@tones);
my @fixed;
for my $p (@pitches) {
    my $x = Music::Note->new($p, 'midinum')->format('isobase');
    if (
        ($flavor =~ /5/ && $x eq $tones[4])
        ||
        ($flavor =~ /7/ && $x eq $tones[6])
        ||
        ($flavor =~ /[#b]9/ && $x eq $tones[1])
    ) {
        print "SKIP: $x\n";
        next;
    }
    push @fixed, $p;
}

# Debugging:
@named = map { Music::Note->new($_, 'midinum')->format('ISO') } @fixed;
print "NEW: ",ddc(\@named);

my @intervals = qw(-3 -2 -1 1 2 3);

my $voice = Music::VoiceGen->new(
    pitches   => \@fixed,
    intervals => \@intervals,
);

# Try to start in the middle of the range
$voice->context($fixed[int @fixed / 2]);

# Show them what they've won, Bob!
for (1 .. $duration) {
    my $v = $voice->rand;
    my $x = Music::Note->new($v, 'midinum')->format('ISO');
    print "CHOSEN: $chord, $x\n";
}
