#!/usr/bin/env perl
use strict;
use warnings;

use Image::Size;
use Imager;
use lib $ENV{HOME} . '/sandbox/Math-Utils-ScaleNumber/lib';
use Math::Utils::ScaleNumber 'to_range'; # https://github.com/ology/Math-Utils-ScaleNumber
use lib $ENV{HOME} . '/sandbox/MIDI-Util/lib';
use MIDI::Util; # https://metacpan.org/release/MIDI-Util

my $file = shift || die "Usage: perl $0 /some/image/file.{gif,jpg,png,etc}\n";

my $score = MIDI::Util::setup_score(bpm => 100, patch => 4);

my $img = Imager->new;
$img->read(file => $file)
    or die "Can't read $file: ", $img->errstr;

my($w, $h) = imgsize($file);

my $w_field = length $w;
my $h_field = length $h;
my $i_field = length($w * $h);

my @color_range = (0, 255);
my @midi_range  = (60, 83);

my $i = 0;

# Add a chord to the score for each RGB pixel color
for my $y (0 .. $h - 1) {
    for my $x (0 .. $w - 1) {
        $i++;

        my $color = $img->getpixel(x => $x, y => $y);

        my ($red, $green, $blue) = $color->rgba;

        my @chord = map { sprintf '%.0f', to_range($_, @color_range, @midi_range) }
            $red, $green, $blue;

        printf "%*d. [%*d,%*d] %3d,%3d,%3d -> %s\n",
            $i_field, $i,
            $w_field, $x, $h_field, $y,
            $red, $green, $blue,
            join(' ', @chord);

        $score->n('qn', @chord);
    }
}

$score->write_score("$0.mid");
