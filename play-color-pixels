#!/usr/bin/env perl
use strict;
use warnings;

use Image::Info qw/image_info dim/;
use Imager;
use lib '/Users/gene/sandbox/MIDI-Util/lib';
use MIDI::Util;

my $file = shift || die "Usage: perl $0 /some/image/file.{gif,jpg,png}\n";

my $score = MIDI::Util::setup_score(bpm => 100, patch => 4);

my $img = Imager->new;
$img->read(file => $file)
    or die "Can't read $file: ", $img->errstr;

my $info = image_info($file);
my($w, $h) = dim($info);

my $wfield = length($w);
my $hfield = length($h);

# Add a chord to the score for each RGB pixel color
for my $y (0 .. $h - 1) {
    for my $x (0 .. $w - 1) {
        my $color = $img->getpixel(x => $x, y => $y);

        my ($red, $green, $blue) = $color->rgba;

        my @chord;
        push @chord, sprintf('%.0f', scale($red)),
                     sprintf('%.0f', scale($green)),
                     sprintf('%.0f', scale($blue));

        printf "[%*d,%*d] %3d,%3d,%3d -> %s\n",
            $wfield, $x, $hfield, $y,
            $red, $green, $blue,
            join(' ', @chord);

        $score->n('qn', @chord);
    }
}

$score->write_score("$0.mid");

# Scale a number from one range (grays) to another (midi)
sub scale {
    my $m = shift;
    my ($r_min, $r_max) = (0, 255); # Grayscale range
    my ($t_min, $t_max) = (60, 83); # MIDI target range starting at middle C
    return (($m - $r_min) / ($r_max - $r_min)) * ($t_max - $t_min) + $t_min;
}

__END__
Noise Types:

  * white           ## pseudo-random values
  * wavelet         ## band-limited ortho
  * gradient        ## persistent gradient noise
  * simplex         ## continuous gradient noise
  * simplex2        ## interpolated simplex
  * square          ## diamond-square algorithm
  * gel             ## self-displaced smooth
  * sgel            ## self-displaced diamond-square
  * dmandel         ## "deep" mandelbrot
  * djulia          ## "deep" julia
  * dla             ## diffusion-limited aggregation
  * worley          ## voronoi cell noise
  * wgel            ## self-displaced cell noise

  ! multires        ## multi-resolution
  ! ridged          ## ridged multifractal
  ! block           ## unsmoothed multi-res
  ! pgel            ## self-displaced multi-res
  ! fur             ## inspired by "Perlin Worms"
  ! tesla           ## worms/fur variant
