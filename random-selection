#!/usr/bin/env perl
use strict;
use warnings;

use MIDIUtil;
use MIDI::Simple;
use Music::AtonalUtil;
use Text::Levenshtein qw(distance);

my $transform = shift || ''; # Can be: invert, retrograde, rotate, transpose
my $parameter = shift || 0;  # For: invert, rotate, transpose
my $distance  = shift || 0;  # Edits needed to transform subsequent phrases

my $phrase = 4;

my @notes = qw( C D E F G A B );

my @population = 0 .. @notes - 1;

# Choose a random populatioin sample
my @sample;
for my $i ( 1 .. $phrase ) {
    push @sample, $population[ int rand @population ];
}

# Set the "previous" phrase
my $previous = join '', @sample;

# Add a L-distance constrained phrase to the sample
my @constrain;
for ( 1 ) {
    for my $i ( 1 .. $phrase ) {
        my $selection = $population[ int rand @population ];
        push @constrain, $selection;
    }
    my $current = join '', @constrain;
    my $d = distance( $previous, $current );
    if ( $d == $distance ) {
        # Update with the added constrained sample
        @sample = ( @sample, @constrain );
    }
    else {
        @constrain = ();
        redo;
    }
}

# Transform the sample, if requested
@sample = transform( $transform, @sample ) if $transform;

# Process the MIDI...
my %name = int2name(@notes);
my @pitches = map { $name{$_} } @sample;
print "@pitches\n";

my $score = MIDIUtil::setup_midi( patch => 0 );

$score->n( 'qn', $_ ) for @pitches;

$score->write_score( $0 . '.mid' );

sub transform {
    my ( $transform, @phrase ) = @_;

    my $atu = Music::AtonalUtil->new;
    my $p;
    if ( $transform eq 'invert' ) {
        $p = $atu->invert( $parameter, \@sample );
    }
    elsif ( $transform eq 'retrograde' ) {
        $p = $atu->retrograde(@sample);
    }
    elsif ( $transform eq 'rotate' ) {
        $p = $atu->rotate( $parameter, \@sample );
    }
    elsif ( $transform eq 'transpose' ) {
        $p = $atu->transpose( $parameter, \@sample );
    }

    return @phrase, @$p;
}

sub int2name {
    my @notes = @_;
    # Convert integer pitch notation into MIDI note names
    my %name;
    my $int = -@notes;
    for my $octave ( 3, 4, 5, 6 ) {
        for my $note (@notes) {
            $name{$int} = $note . $octave;
#warn "N:$int $name{$int} = $note . $octave\n";
            $int++;
        }
    }
    return %name;
}
