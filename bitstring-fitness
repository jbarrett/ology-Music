#!/usr/bin/env perl
use strict;
use warnings;

use Algorithm::Evolutionary::Individual::BitString;
use List::Util qw( shuffle );
use Music::AtonalUtil;
use MIDI::Simple;
 
my $BITS    = shift || 11;  # Maximum pitches
my $DEGREES = shift || 7;   # Constraining scale
my $PHRASES = shift || 4;   # Number of times to play the "melody"
print "BITS/DEGREES/PHRASES: $BITS/$DEGREES/$PHRASES\n";

my $ae = Algorithm::Evolutionary::Individual::BitString->new($BITS);

# Show the initial mutation
print $ae->{_str}, "\n";

# Find a fit...
my $mutation = 0;
while ( not is_fit( $ae->{_str} ) )
{
    $mutation++;

    # Mutate!
    # Get a bit to twiddle
    my $n = int rand $BITS;
    warn "\t$mutation. N:$n\n";

    # Toggle the bit in the string
    $ae->Atom( $n, ($ae->Atom($n) ? 0 : 1) );
}

# Show the final mutation
print $ae->{_str}, "\n";

# Turn the bitstring into a proper pitch set
my $pitches = bits2pitches( $ae->{_str} );

# Apply pitch set rules:
@$pitches = shuffle( @$pitches );

my $atu = Music::AtonalUtil->new;
my $atup = $atu->transpose( 0, $pitches );
#$atup = $atu->retrograde( @$pitches );
#$atup = $atu->invert(6, $p);
#$atup = $atu->transpose(2, $atup);
#$atup = $atu->rotate(1, $atup);

# Post mutation, phrase alterations
my $funct = {
    invert     => sub { my $x = shift; $atu->invert( $x, $atup ) },
    retrograde => sub { $atu->retrograde( @$pitches ) },
    rotate     => sub { my $x = shift; $atu->rotate( $x, $atup ) },
    transpose  => sub { my $x = shift; $atu->transpose( $x, $atup ) },
};

#$atup = $funct->{retrograde}->();

# What have we now?
print '(', join( ',', @$pitches, @$atup ), ')', "\n";

# MIDI!
my %name  = int2name();
my $score = set_score();
for my $phrase ( 1 .. $PHRASES )
{
    $score->n( { $score->Cookies }->{unit}, $name{$_} ) for @$pitches, @$atup;
    $score->r( { $score->Cookies }->{unit} );
}
$score->write_score( $0 . '.mid' );

sub is_fit
{
    my $str = shift;

    my $is_fit = 0;

    # Count the number of zeros and ones
    my $zeros =()= $str =~ /0/g;
    my $ones  =()= $str =~ /1/g;
#    warn "Z,O:$zeros,$ones\n";
    # There should be more pitches (ones) than zeros
    $is_fit = $zeros < (2 * $BITS / 3) && $ones > ($BITS / 2)
        ? 1 : 0;
    return 0 unless $is_fit;

    # Include consonant pitches
#    $is_fit = substr( $str, 0, 1 ) ? 1 : 0;
    $is_fit = substr( $str, 0, 4 )  || substr( $str, 0, 5 )
           || substr( $str, 0, 7 )  || substr( $str, 0, 9 )  || substr( $str, 0, 11 )
           || substr( $str, 0, 12 ) || substr( $str, 0, 16 ) || substr( $str, 0, 17 )
           || substr( $str, 0, 19 ) || substr( $str, 0, 21 ) || substr( $str, 0, 23 )
        ? 1 : 0;
    return 0 unless $is_fit;

    # Do not allow clusters of more than two pitches
    $is_fit = $str =~ /1{3,}/ ? 0 : 1;

    return $is_fit;
}

sub bits2pitches
{
    # Convert 1001001000101000 form to [0,3,6,10,12] set form
    my $bitstring = shift;

    my $pitches = [];

    my $i = 0;
    for my $bit ( split //, $bitstring ) {
        push $pitches, $i % $DEGREES if $bit;
        $i++;
    }

    return $pitches;
}

sub int2name
{
    # Convert integer pitch notation into MIDI note names
    my %name;
    my @notes = qw( C Cs D Ds E F G Gs A As B );
    my $int = -( $BITS + 1 );
    for my $octave ( 3, 4, 5, 6 )
    {
        for my $note (@notes)
        {
            $name{ $int++ } = $note . $octave;
        }
    }
    return %name;
}

sub set_score {
    my %conf = (
        tempo     => 600_000,
        volume    => 100,
        signature => 4,
        unit      => 'en',
        channel   => 1,
        patch     => 108,
        octave    => 4,
        kit       => 9,
        pad       => 38,
    );

    my $score = MIDI::Simple->new_score();

    $score->Volume($conf{volume});
    $score->set_tempo($conf{tempo});

    # lead-in
    $score->Channel($conf{kit});
    $score->n($conf{unit}, $conf{pad}) for 1 .. $conf{signature};

    # passage
    $score->patch_change($conf{channel}, $conf{patch});
    $score->Channel($conf{channel});
    $score->Octave($conf{octave});
    $score->Cookies(unit => $conf{unit});

    return $score;
}
