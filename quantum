#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper::Compact qw(ddc);
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Util);
use MIDI::Util qw(setup_score set_chan_patch);
use Music::Scales qw(get_scale_notes);
use Quantum::Superpositions::Lazy;

my $max               = shift || 8;
my $scale_note        = shift || 'C';
my $treble_scale_name = shift || 'major';
my $bass_scale_name   = shift || 'pentatonic';

my $treble_octave = 4;
my $bass_octave   = 2;

my @treble_notes = map { $_ . $treble_octave } get_scale_notes($scale_note, $treble_scale_name);
my @bass_notes   = map { $_ . $bass_octave } get_scale_notes($scale_note, $bass_scale_name);

for my $n (1 .. $max) {
    my @chord = map { superpos(@treble_notes) } 1 .. 3;
    my $bass = superpos(@bass_notes);
    my $phrase = join ' ', @chord, $bass;
    my $random_phrase = superpos($phrase);
    my $realized = $random_phrase->collapse;
    my @phrase = split / /, $realized;
    warn 'Initial: ', ddc(\@phrase);

    while ($phrase[0] eq $phrase[1] || $phrase[0] eq $phrase[2] || $phrase[1] eq $phrase[2]) {
        @chord = map { superpos(@treble_notes) } 1 .. 3;
        $bass = superpos(@bass_notes);
        $phrase = join ' ', @chord, $bass;
        $random_phrase = superpos($phrase);
        $realized = $random_phrase->collapse;
        @phrase = split / /, $realized;
        warn 'Recompute: ', ddc(\@phrase);
    }

    print $realized, "\n";
}
