#!/usr/bin/env perl
use strict;
use warnings;

use AI::Genetic;
use List::Util qw/ uniq /;
use lib $ENV{HOME} . '/sandbox/MIDI-Util/lib';
use MIDI::Util; # https://metacpan.org/release/MIDI-Util
use lib $ENV{HOME} . '/sandbox/Music-ToRoman/lib';
use lib $ENV{HOME} . '/sandbox/Music-Cadence/lib';
use Music::Cadence; # https://metacpan.org/release/Music-Cadence
use Music::Chord::Namer 'chordname';
use lib $ENV{HOME} . '/sandbox/Music-Duration-Partition/lib';
use Music::Duration::Partition; # https://metacpan.org/release/Music-Duration-Partition
use lib $ENV{HOME} . '/sandbox/Music-Interval-Barycentric/lib';
use Music::Interval::Barycentric; # https://metacpan.org/release/Music-Interval-Barycentric
use Music::Note;
use Music::Scales;

my $bpm   = shift || 120;
my $patch = shift || 4;

my $population = 50;
my $iterations = 2;

my $reps = 7; # Loop repetitions
my $max = 48; # Number of evolved results
my $top = 8; # Highest value of chromosome
my $base = 60; # Base of middle C MIDI values
my $size = 4; # Phrase duration size in quarter notes

my $sizes = { %MIDI::Simple::Length };

my @fittest = evo($max);

my $score = MIDI::Util::setup_score(bpm => $bpm, patch => $patch);

my $mc = Music::Cadence->new(octave => 5);

my $count = 0;

$score->synch(
    \&fit,
    \&bass,
    \&drums,
);

$score->write_score("$0.mid");

sub fit {
    legato('wn', $fittest[0]);

    my $mdp = Music::Duration::Partition->new(
        size => $size,
        pool => [qw/ hn qn en /],
    );
    my $motif = $mdp->motif;

    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }

    # Resolution
    add_cadence('wn', 1 + int rand 7);
    $score->n('wn', 60, 64, 67); # I

    for my $n (0 .. $reps * 2) {
        legato('wn', $fittest[$n % @fittest]);
    }

    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }
    add_cadence('wn', 1 + int rand 7);

    $motif = $mdp->motif;
    for my $n (0 .. $reps) {
        legato($motif->[$n % @$motif], $fittest[$n % @fittest]);
    }

    $score->n('wn', 60, 64, 67); # I
}

sub legato {
    my ($dura, $fit) = @_;
    $score->n($dura, map { $base + $_ } @$fit);
    $count += $sizes->{$dura};
}

sub add_cadence {
    my $dura = shift || 'hn';
    my $n = shift || 1;
    my $chords = $mc->cadence(
        type    => 'half',
        leading => $n,
    );
    $score->n($dura, @$_) for @$chords;
    $count += $sizes->{$dura} * 2;'hn'
}

sub add_rest {
    my $dura = shift;
    $score->r($dura);
    $count += $sizes->{$dura};
}

sub bass {
    MIDI::Util::set_chan_patch($score, 1, 35); #42

    my @scale = get_scale_MIDI('C', 3, 'pentatonic');

    $score->n('wn', $scale[0]);

    # Play and save a random note
    my @notes;
    for my $n (0 .. $reps) {
        my $note = $scale[int rand @scale];
        push @notes, $note;
        $score->n('hn', $note);
    }

    my $mdp = Music::Duration::Partition->new(
        size => $size,
        pool => [qw/ hn qn /],
    );
    my $motif = $mdp->motif;

    # Play a random note for each motif
    for my $n (0 .. 15) {
        $score->n($motif->[$n % @$motif], $scale[int rand @scale]);
    }

    # Play a random note twice in a row
    my $last;
    for my $n (0 .. $reps) {
        my $note = $scale[int rand @scale];
        $score->n('hn', $n % 2 ? $note : $last);
        $last = $note;
    }

    # Play the notes from the first loop for each motif
    for my $n (0 .. $reps) {
        $score->n($motif->[$n % @$motif], $notes[$n]);
    }

    # Resolution
    $score->n('wn', $scale[0]);

    for my $n (0 .. $reps * 2) {
        $score->n('en', $scale[0]);
        $score->n('en', $scale[0]);
        $score->r('dhn');
    }

    # Play a random note
    for my $n (0 .. $reps) {
        $score->n('hn', $scale[int rand @scale]);
    }

    # Play a random note for each motif
    for my $n (0 .. 15) {
        $score->n($motif->[$n % @$motif], $scale[int rand @scale]);
    }

    # Play a random note twice in a row
    my $last;
    for my $n (0 .. $reps) {
        my $note = $scale[int rand @scale];
        $score->n('hn', $n % 2 ? $note : $last);
        $last = $note;
    }

    # Play the notes from the first loop for each motif
    for my $n (0 .. $reps) {
        $score->n($motif->[$n % @$motif], $notes[$n]);
    }

    $score->n('wn', $scale[0]);
}

sub drums {
    MIDI::Util::set_chan_patch($score, 9, 44);

    for my $duration (('qn') x ($count + 4)) {
        $score->n($duration, 44); # hi-hat
    }

    # Resolution
    $score->n('wn', 49); # crash
}

sub evo {
    my $max = shift;

    my $ga = AI::Genetic->new(
        -fitness    => \&fitness,
        -type       => 'listvector',
        -population => $population,
        -crossover  => 0.95,
        -mutation   => 0.01,
    );

    my $items = [ ([ 0 .. 11 ]) x 3 ]; # Chromatic triad
    
    $ga->init($items);
    $ga->evolve('rouletteTwoPoint', $iterations);

    my %seen;
    my @genes;
    for my $fit ($ga->getFittest($max)) {
        my @sorted = sort { $a <=> $b } @{ $fit->{GENES} };
        next if $seen{"@sorted"}++;
        push @genes, \@sorted;
    }

    my $i = 0;
    for my $fit (@genes) {
        $i++;
        my @named;
        for my $n (@$fit) {
            my $note = Music::Note->new($n + $base, 'midinum');
            push @named, $note->format('isobase');
        }
        printf "%d. [%d,%d,%d] => (%s,%s,%s) => %s\n", $i, @$fit, @named, scalar chordname(@named);
    }

    return @genes;
}
 
 sub fitness {
    my $chromosome = shift;

    # Chords with duplicate notes not allowed
    return 0
        if @$chromosome > uniq(@$chromosome);

    # Chords with sharps or flats not allowed
    for my $i (@$chromosome) {
        my $note = Music::Note->new($i + $base, 'midinum');
        return 0
            if $note->format('isobase') =~ /#|b/;
    }

    my $e = evenness_index($chromosome);

    return $top - $e;
}
