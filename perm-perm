#!/usr/bin/env perl
use strict;
use warnings;

use MIDI::Simple;
use Math::Combinatorics;
use List::Util qw( shuffle );

my $max = defined $ARGV[0] ? shift : 16;  # Maximum notes to play

my @treb_notes = qw( F5 G5 As5 C6 ); # Cs, Ds, etc
my @treb_dura  = qw( en qn qn qn );   # sn, dsn, ddsn, tsn, etc
my @treb_volu  = qw( mezzo mezzo mf mf ); # ppp pp p mp mezzo mf f ff fff
my @bass_notes = qw( C3 F3 F3 G3 );
my @bass_dura  = qw( qn qn qn qn );
my @bass_volu  = qw( mf mf mf mf );

my @treb_combos      = shuffle permute(@treb_notes);
my @treb_dura_combos = shuffle permute(@treb_dura);
my @treb_volu_combos = shuffle permute(@treb_volu);
my @bass_combos      = shuffle permute(@bass_notes);
my @bass_dura_combos = shuffle permute(@bass_dura);
my @bass_volu_combos = shuffle permute(@bass_volu);

my $score = setup_midi(
    lead_in => scalar(@treb_notes),
);

my $n = 0;

for my $i ( 0 .. @treb_combos - 1 ) {
    for my $j ( 0 .. @{ $treb_combos[$i] } - 1 ) {
        $n++;
        last if $max && $n > $max;

        printf "%2d. Treble: %s, %s, %s\n",
            $n,
            $treb_volu_combos[$i][$j],
            $treb_dura_combos[$i][$j],
            $treb_combos[$i][$j];
        printf "      Bass: %s, %s, %s\n",
            $bass_volu_combos[$i][$j],
            $bass_dura_combos[$i][$j],
            $bass_combos[$i][$j];

        if ( $treb_dura_combos[$i][$j] eq $bass_dura_combos[$i][$j] ) {
            if ( $treb_combos[$i][$j] && $bass_combos[$i][$j] ) {
                $score->n(
                    $treb_volu_combos[$i][$j],
                    $treb_dura_combos[$i][$j],
                    $treb_combos[$i][$j],
                    $bass_combos[$i][$j]
                );
            }
            elsif ( $treb_combos[$i][$j] ) {
                $score->n(
                    $treb_volu_combos[$i][$j],
                    $treb_dura_combos[$i][$j],
                    $treb_combos[$i][$j]
                );
            }
            elsif ( $bass_combos[$i][$j] ) {
                $score->n(
                    $bass_volu_combos[$i][$j],
                    $bass_dura_combos[$i][$j],
                    $bass_combos[$i][$j]
                );
            }
            else {
                $score->r( $treb_dura_combos[$i][$j] );
            }
        }
        else {
            if ( $treb_combos[$i][$j] ) {
                $score->n(
                    $treb_volu_combos[$i][$j],
                    $treb_dura_combos[$i][$j],
                    $treb_combos[$i][$j]
                );
            }
            else {
                $score->r( $treb_dura_combos[$i][$j] );
            }
            if ( $bass_combos[$i][$j] ) {
                $score->n(
                    $bass_volu_combos[$i][$j],
                    $bass_dura_combos[$i][$j],
                    $bass_combos[$i][$j]
                );
            }
            else {
                $score->r( $bass_dura_combos[$i][$j] );
            }
        }
    }

    last if $max && $n > $max;
}

$score->write_score( $0 . '.mid' );

sub setup_midi {
    my %args = (
        lead_in => 4,
        channel => 1,
        patch   => 42,
        volume  => 120,
        @_,
    );
    my $score = MIDI::Simple->new_score();
    $score->Volume($args{volume});
    # Lead-in
    $score->Channel(9);
    $score->n( 'qn', $args{patch} ) for 1 .. $args{lead_in};
    # Passage
    $score->Channel($args{channel});
    $score->patch_change( $args{channel}, $args{patch} );
    return $score;
}
