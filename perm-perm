#!/usr/bin/env perl
use strict;
use warnings;

use Math::Combinatorics;
use Music::Scala;

# Choose wisely, Grasshopper
my $bass_notes   = [qw( 9 2 4 7 21 )]; # A D E G A'
my $treble_notes = [qw( 0 2 4 5 9 )];  # C D E F A

# Named pitches and integer notation
my %name = (
    0  => 'C',
    1  => 'C#',
    2  => 'D',
    3  => 'D#',
    4  => 'E',
    5  => 'F',
    6  => 'F#',
    7  => 'G',
    8  => 'G#',
    9  => 'A',
    10 => 'A#',
    11 => 'B',
    21 => 'A',
);

# Use the standard 12-tone scale
my @scale = qw( 1 16/15 9/8 6/5 5/4 4/3 25/18 3/2 8/5 5/3 16/9 15/8 2 );
my $scala = Music::Scala->new;
$scala->set_concertfreq(261.626);
$scala->set_notes(@scale);

# Set the number of permutaions seen
my $i = 0;

# Instantiate a combinatorics object for the bass notes
my $bass_mc = Math::Combinatorics->new( data => $bass_notes );

# Iterate over the bass notes
while ( my @bass = $bass_mc->next_permutation ) {
    # Throw away the last element of the permutation
    pop @bass;

    # Find the physical frequencies of the notes
    my @bass_freq = $scala->interval2freq(@bass);

    # Set item precision
    @bass_freq = mapf(@bass_freq);

    # Join names with pitches
    for my $n ( 0 .. @bass - 1 ) {
        $bass_freq[$n] = $name{ $bass[$n] } . $bass_freq[$n];
    }

    # Instantiate a combinatorics object for the bass notes
    my $treble_mc = Math::Combinatorics->new( data => $treble_notes );

    # Iterate over the bass notes
    while ( my @treble = $treble_mc->next_permutation ) {
        # Iterate the number of permutations
        $i++;

        # Throw away the last element of the permutation
        pop @treble;

        # Find the physical frequencies of the notes
        my @treble_freq = $scala->interval2freq(@treble);
        # Set item precision
        @treble_freq = mapf(@treble_freq);

        # Find the interval set comprising each bass and treble note
        my @intervals = ();
        for my $n ( 0 .. @bass - 1 ) {
            # An interval is the absolute difference of two pitches, modulo the number of semitones
            push @intervals, abs( $bass[$n] - $treble[$n] ) % 12;
        }

        # Join names with pitches
        for my $n ( 0 .. @treble - 1 ) {
            $treble_freq[$n] = $name{ $treble[$n] } . $treble_freq[$n];
        }

        # Output the permutations, frequencies and intervals
        print "$i\t@treble -> ", join( ' ', @treble_freq ), "\n";
        print "\t@bass -> ", join( ' ', @bass_freq ), "\n";
        print "=\t@intervals\n";
    }

    last;
}

sub mapf { # Turn a list of floats into 2 digit precision
    return map { sprintf '%.2f', $_ } @_;
}
