#!/usr/bin/env perl
use strict;
use warnings;

use Math::Combinatorics;
use Music::Scala;

# Choose wisely, Grasshopper
my $bass_notes   = [qw( 9 2 4 7 21 )]; # A D E G A'
my $treble_notes = [qw( 0 2 4 5 9 )];  # C D E F A
my $critical_t   = 1;
my $critical_b   = 1;

# Perl-MIDI named pitches and integer notation
my %name = (
    0  => 'C',
    1  => 'Cs',
    2  => 'D',
    3  => 'Ds',
    4  => 'E',
    5  => 'F',
    6  => 'Fs',
    7  => 'G',
    8  => 'Gs',
    9  => 'A',
    10 => 'As',
    11 => 'B',
    21 => "A'",
);

# Use the standard 12-tone scale
my @scale = qw( 1 16/15 9/8 6/5 5/4 4/3 25/18 3/2 8/5 5/3 16/9 15/8 2 );
my $scala = Music::Scala->new;
$scala->set_concertfreq(264);
$scala->set_notes(@scale);

# Set the number of treble permutaions seen
my $j = 0;

# Instantiate a combinatorics object for the bass notes
my $treble_mc = Math::Combinatorics->new( data => $treble_notes );

# Iterate over the treble notes
TREBLE: while ( my @treble = $treble_mc->next_permutation ) {
    # Are we critical?
    last TREBLE if $j > $critical_t - 1;
    # Iterate the number of permutations
    $j++;

    # Throw away the last element of the permutation
    pop @treble;

    # Find the physical frequencies of the notes
    my @treble_freq = $scala->interval2freq(@treble);
    # Set item precision
    @treble_freq = mapf(@treble_freq);

    # Set the number of bass permutaions seen
    my $i = 0;

    # Instantiate a combinatorics object for the bass notes
    my $bass_mc = Math::Combinatorics->new( data => $bass_notes );

    # Iterate over the bass notes
    BASS: while ( my @bass = $bass_mc->next_permutation ) {
        # Are we critical?
        last BASS if $i > $critical_b - 1;
        # Iterate the number of permutations
        $i++;

        # Throw away the last element of the permutation
        pop @bass;

        # Find the physical frequencies of the notes
        my @bass_freq = $scala->interval2freq(@bass);

        # Set item precision
        @bass_freq = mapf(@bass_freq);

        # List the pitch names
        my @bass_names;
        push @bass_names, $name{ $bass[$_] } for 0 .. @bass - 1;

        # Find the interval set comprising each bass and treble note
        my @intervals = ();
        for my $n ( 0 .. @bass - 1 ) {
            # An interval is the absolute difference of two pitches, modulo the number of semitones
            push @intervals, abs( $bass[$n] - $treble[$n] ) % 12;
        }

        # List the pitch names
        my @treble_names;
        push @treble_names, $name{ $treble[$_] } for 0 .. @treble - 1;

        # Output the permutations, frequencies and intervals
        printf "%d,%d\n\t%11s -> %s -> %11s\n\t%11s -> %s -> %11s\n      =\t%s\n",
            $j, $i,
            joinf(@treble), "@treble_freq", joinf(@treble_names),
            joinf(@bass),   "@bass_freq",   joinf(@bass_names),
            joinf(@intervals);
    }
}

sub joinf { # Turn a list of integers into 2 digit precision
    return join ' ', map { sprintf '%2s', $_ } @_;
}

sub mapf { # Turn a list of floats into 2 digit precision
    return map { sprintf '%.2f', $_ } @_;
}
