#!/usr/bin/env perl

use strict;
use warnings;

# Use my local CPAN libraries
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration Music-Duration-Partition);

use MIDI::Drummer::Tiny ();
use MIDI::Util qw(midi_dump);
use Music::Duration::Partition ();
use Data::Dumper::Compact qw(ddc);

#use Pod::Usage qw(pod2usage);
#pod2usage(-verbose => 2); exit;
# perl drum-circle > ~/Documents/drum-circle.txt

my $drummers = shift || 4;  # The number of drummers
my $bpm      = shift || 90; # Beats per minute
my $extend   = shift // 4;  # The number of bars to play after all drummers have entered

my $width = length $drummers; # Used in sprintf below

# Setup a drum score
my $d = MIDI::Drummer::Tiny->new(
    file   => "$0.mid",
    bpm    => $bpm,
    bars   => $drummers * 4, # each drummer gets 4 measures before the next enters
    reverb => 15,       # we're outside
);

# Collect the percussion instruments
my @drums = (
    # $d->mute_hi_conga, $d->cabasa, $d->maracas, $d->hi_bongo, # QUIET ONES
    $d->low_bongo, $d->open_hi_conga, $d->low_conga, $d->short_guiro, $d->claves, $d->hi_wood_block, $d->low_wood_block,
    # $d->hi_tom, $d->hi_mid_tom, $d->low_mid_tom, $d->low_tom, $d->hi_floor_tom, $d->low_floor_tom,
);

die "Can't have more drummers than ", scalar(@drums), " drums!\n"
    if $drummers > @drums;

# Make a phrase generator
my $generator = Music::Duration::Partition->new(
    size => 4,
    pool => [qw(qn den en sn)],
);

my %seen; # Drums that have been selected

# Common phrase() arguments
my %common = (
    drummer => $d, drums => \@drums, extend => $extend, generator => $generator, seen => \%seen, width => $width,
);

# Build the code-ref MIDI phrases played by each drummer
my @phrases;
push @phrases, phrase(%common, phrase => $_)
    for 1 .. $drummers;

$d->score->synch(@phrases); # Play the phrases simultaneously

$d->write; # Write the score to a MIDI file

sub phrase {
    my (%args) = @_;

    # Get an unseen drum to use
    my $drums = $args{drums};
    my $drum = $drums->[int rand @$drums];
    while ($args{seen}->{$drum}++) {
        $drum = $drums->[int rand @$drums];
    }
    my $drum_name = midi_dump('notenum2percussion')->{$drum};

    # Create a rhythmic phrase
    my $motif = $args{generator}->motif;

    printf "%*d. %s: %s", $args{width}, $args{phrase}, $drum_name, ddc($motif);

    # Either rest or play the motif
    my $phrase = sub {
        for my $n (1 .. $args{drummer}->bars + $args{extend}) {
            # If we are not up yet, then rest
            if ($n < ($args{phrase} * 4)) {
                $args{drummer}->rest($args{drummer}->whole);
                next;
            }
            # Otherwise play the rhythmic phrase!
            for my $dura (@$motif) {
                # Get a fluctuating velocity between f and fff
                my $vol = 'v' . (96 + int(rand 32));
                $args{drummer}->note($dura, $drum, $vol);
            }
        }
    };

    return $phrase;
}

__END__

=head1 NAME

Imitating a Drum Circle

=head1 SYNOPSIS

  $ perl drum-circle 7;
  $ timidity -c ~/timidity.cfg drum-circle.mid
  # Windows plays MIDI with the "Legacy Media Player"

=head1 DESCRIPTION

This program simulates a "drum circle", which may include friendly
hippies.

=head1 THE CODE

=head2 Setup

1. Set the user defined number of drummers to play. This is 4 by
default and 7 max.

2. Set the user defined number of measures to play after all drummers
have joined the circle. This is 4 by default.

3. Declare a L<MIDI::Drummer::Tiny> instance, that will be the beating
heart of the program.

4. Declare the known percussion instruments. These are:

  hi_bongo
  low_bongo
  mute_hi_conga
  open_hi_conga
  low_conga
  cabasa
  maracas
  short_guiro
  claves
  hi_wood_block
  low_wood_block

5. Instantiate a rhythmic phrase generator of 4 beats and a pool of
these possible durations:

  quarter note
  dotted eighth note
  eighth note
  sixteenth note

=head2 Phrases

Gather all the drummer phrases and play them simultaneously. Then
write the score to a MIDI file.

1. Build the phrases to play, one for each drummer.

2. Synchronize the phrase parts, so that they are played
simultaneously.

3. Finally, write the score to a MIDI file, named after the program
itself.

=head2 Subroutine

This is the meat of the program, utilizing all the things we have
setup. It generates a phrase, which is added to the list of phrases
that are then played together.

1. Get an unseen drum to use for a player, given the phrase number.
This is given by the loop that collects the phrases, above.

2. Generate a rhythmic "motif."

3. Create an anonymous subroutine that either rests or plays the
motif, given the phrase number.

3.1. The resting is done depending on the drummer entry order (into
the circle). If we are not up yet, then rest.

3.2. If not resting, play the phrase continuously until the end.

3.2.1. For each hit, get a random velocity between soft (C<f>) and
loud (C<fff>). This gives the sound a bit of dynamic texture.

4. Return this anonymous subroutine to be gathered into a list of all
drummer parts.

=cut

