#!/usr/bin/env perl

# Ex:
# $ perl drum-circle 11; timidity -c ~/timidity.cfg drum-circle.mid

use strict;
use warnings;

# Use my local libraries
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(MIDI-Drummer-Tiny MIDI-Util Music-Duration Music-Duration-Partition);

use MIDI::Drummer::Tiny;
use Music::Duration::Partition;
use Data::Dumper::Compact qw(ddc);

# The number of drummers
my $max = shift || 4;
# The number of bars to play after all drummers have entered
my $extend = shift || 4;

my $width = length $max;

# Setup a drum score
my $d = MIDI::Drummer::Tiny->new(
    file => "$0.mid",
    bpm  => 90,
    bars => $max * 4,
    reverb => 15,
);

# List the available percussion instruments
my @DRUMS = (
#    $d->hi_tom, $d->hi_mid_tom, $d->low_mid_tom, $d->low_tom, $d->hi_floor_tom, $d->low_floor_tom,
    $d->hi_bongo, $d->low_bongo, $d->mute_hi_conga, $d->open_hi_conga, $d->low_conga,
    $d->cabasa, $d->maracas, $d->short_guiro, $d->claves, $d->hi_wood_block, $d->low_wood_block,
);

die "Can't have more drummers than drums!"
    if $max > @DRUMS;

my %seen; # Bucket of drums that have been selected

my @phrases; # List of code-ref MIDI phrases

# Make a phrase generator
my $mdp = Music::Duration::Partition->new(
    size => 4,
    pool => [qw(qn den en sn)],
);

# Build the phrases played by each drummer
push @phrases, phrase($_)
    for 1 .. $max;

$d->score->synch(@phrases); # Play the phrases simultaneously

$d->write; # Write the score to a MIDI file

sub phrase {
    my ($p) = @_; # Phrase number

    # Get an unseen drum to use
    my $drum = $DRUMS[int rand @DRUMS];
    while ($seen{$drum}++) {
        $drum = $DRUMS[int rand @DRUMS];
    }

    # Create a rhythmic phrase
    my $motif = $mdp->motif;

    printf "%*d. Drum: %s, Motif: %s", $width, $p, $drum, ddc($motif);

    # Either rest or play the motif
    my $phrase = sub {
        for my $n (1 .. $d->bars + $extend) {
            # If we are not up yet, then rest
            if ($n < ($p * 4)) {
                $d->rest($d->whole);
                next;
            }
            # Otherwise play the rhythmic phrase!
            for my $dura (@$motif) {
                # Get a fluctuating velocity between f and fff
                my $vol = 'v' . (96 + int(rand 32));
                $d->note($dura, $drum, $vol);
            }
        }
    };

    return $phrase;
}
